
Candy_Machinev1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004130  08004130  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004138  08004138  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000010  08004150  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08004150  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2dd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f63  00000000  00000000  0002e31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  00030280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  00031100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001650e  00000000  00000000  00031f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b885  00000000  00000000  00048446  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b304  00000000  00000000  00053ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000defcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c80  00000000  00000000  000df04c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d58 	.word	0x08003d58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003d58 	.word	0x08003d58

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SystemClock_Config>:
I2C_HandleTypeDef hi2c1;
TIM_HandleTypeDef htim3;
UART_HandleTypeDef huart1;

void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b094      	sub	sp, #80	; 0x50
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0320 	add.w	r3, r7, #32
 80004e2:	2230      	movs	r2, #48	; 0x30
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f003 fc2e 	bl	8003d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <SystemClock_Config+0xc8>)
 8000502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000504:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <SystemClock_Config+0xc8>)
 8000506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050a:	6413      	str	r3, [r2, #64]	; 0x40
 800050c:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <SystemClock_Config+0xc8>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <SystemClock_Config+0xcc>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a20      	ldr	r2, [pc, #128]	; (80005a4 <SystemClock_Config+0xcc>)
 8000522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <SystemClock_Config+0xcc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000534:	2302      	movs	r3, #2
 8000536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	2310      	movs	r3, #16
 800053e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000540:	2302      	movs	r3, #2
 8000542:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000544:	2300      	movs	r3, #0
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000548:	2308      	movs	r3, #8
 800054a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800054c:	2354      	movs	r3, #84	; 0x54
 800054e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000550:	2302      	movs	r3, #2
 8000552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000554:	2304      	movs	r3, #4
 8000556:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	4618      	mov	r0, r3
 800055e:	f001 ff15 	bl	800238c <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000568:	f000 f94c 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000570:	2302      	movs	r3, #2
 8000572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2102      	movs	r1, #2
 8000588:	4618      	mov	r0, r3
 800058a:	f002 f96f 	bl	800286c <HAL_RCC_ClockConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000594:	f000 f936 	bl	8000804 <Error_Handler>
  }
}
 8000598:	bf00      	nop
 800059a:	3750      	adds	r7, #80	; 0x50
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40007000 	.word	0x40007000

080005a8 <MX_I2C1_Init>:

void MX_I2C1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <MX_I2C1_Init+0x50>)
 80005ae:	4a13      	ldr	r2, [pc, #76]	; (80005fc <MX_I2C1_Init+0x54>)
 80005b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_I2C1_Init+0x50>)
 80005b4:	4a12      	ldr	r2, [pc, #72]	; (8000600 <MX_I2C1_Init+0x58>)
 80005b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_I2C1_Init+0x50>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_I2C1_Init+0x50>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_I2C1_Init+0x50>)
 80005c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <MX_I2C1_Init+0x50>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_I2C1_Init+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_I2C1_Init+0x50>)
 80005e6:	f001 fa91 	bl	8001b0c <HAL_I2C_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f0:	f000 f908 	bl	8000804 <Error_Handler>
  }

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000003c 	.word	0x2000003c
 80005fc:	40005400 	.word	0x40005400
 8000600:	000186a0 	.word	0x000186a0

08000604 <MX_TIM3_Init>:

void MX_TIM3_Init(uint32_t Periode)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_TIM3_Init+0x9c>)
 8000626:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <MX_TIM3_Init+0xa0>)
 8000628:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_TIM3_Init+0x9c>)
 800062c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_TIM3_Init+0x9c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = (Periode*2)-1;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	3b01      	subs	r3, #1
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_TIM3_Init+0x9c>)
 8000640:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_TIM3_Init+0x9c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_TIM3_Init+0x9c>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MX_TIM3_Init+0x9c>)
 8000650:	f002 fad8 	bl	8002c04 <HAL_TIM_Base_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800065a:	f000 f8d3 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_TIM3_Init+0x9c>)
 800066c:	f002 fc21 	bl	8002eb2 <HAL_TIM_ConfigClockSource>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000676:	f000 f8c5 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_TIM3_Init+0x9c>)
 800068a:	f002 fe0b 	bl	80032a4 <HAL_TIMEx_MasterConfigSynchronization>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000694:	f000 f8b6 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000090 	.word	0x20000090
 80006a4:	40000400 	.word	0x40000400

080006a8 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_USART1_UART_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f002 fe62 	bl	80033a8 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ea:	f000 f88b 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000d0 	.word	0x200000d0
 80006f8:	40011000 	.word	0x40011000

080006fc <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <MX_GPIO_Init+0xf8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a36      	ldr	r2, [pc, #216]	; (80007f4 <MX_GPIO_Init+0xf8>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <MX_GPIO_Init+0xf8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <MX_GPIO_Init+0xf8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <MX_GPIO_Init+0xf8>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <MX_GPIO_Init+0xf8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <MX_GPIO_Init+0xf8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a28      	ldr	r2, [pc, #160]	; (80007f4 <MX_GPIO_Init+0xf8>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xf8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xf8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <MX_GPIO_Init+0xf8>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_GPIO_Init+0xf8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000788:	481b      	ldr	r0, [pc, #108]	; (80007f8 <MX_GPIO_Init+0xfc>)
 800078a:	f001 f9a5 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	212a      	movs	r1, #42	; 0x2a
 8000792:	481a      	ldr	r0, [pc, #104]	; (80007fc <MX_GPIO_Init+0x100>)
 8000794:	f001 f9a0 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	4811      	ldr	r0, [pc, #68]	; (80007f8 <MX_GPIO_Init+0xfc>)
 80007b2:	f000 fff7 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80007b6:	232a      	movs	r3, #42	; 0x2a
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <MX_GPIO_Init+0x100>)
 80007ce:	f000 ffe9 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80007d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_GPIO_Init+0x104>)
 80007e8:	f000 ffdc 	bl	80017a4 <HAL_GPIO_Init>

}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020400 	.word	0x40020400

08000804 <Error_Handler>:

void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080a:	e7fe      	b.n	800080a <Error_Handler+0x6>

0800080c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af02      	add	r7, sp, #8
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f023 030f 	bic.w	r3, r3, #15
 800081c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f043 030c 	orr.w	r3, r3, #12
 800082a:	b2db      	uxtb	r3, r3
 800082c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	b2db      	uxtb	r3, r3
 8000836:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	f043 030c 	orr.w	r3, r3, #12
 800083e:	b2db      	uxtb	r3, r3
 8000840:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	b2db      	uxtb	r3, r3
 800084a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800084c:	f107 0208 	add.w	r2, r7, #8
 8000850:	2364      	movs	r3, #100	; 0x64
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2304      	movs	r3, #4
 8000856:	214e      	movs	r1, #78	; 0x4e
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <lcd_send_cmd+0x5c>)
 800085a:	f001 fa8f 	bl	8001d7c <HAL_I2C_Master_Transmit>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000003c 	.word	0x2000003c

0800086c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
    switch (row)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b03      	cmp	r3, #3
 800087a:	d81f      	bhi.n	80008bc <lcd_put_cur+0x50>
 800087c:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <lcd_put_cur+0x18>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	08000895 	.word	0x08000895
 8000888:	0800089f 	.word	0x0800089f
 800088c:	080008a9 	.word	0x080008a9
 8000890:	080008b3 	.word	0x080008b3
    {
        case 0:
            col |= 0x80;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089a:	603b      	str	r3, [r7, #0]
            break;
 800089c:	e00e      	b.n	80008bc <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008a4:	603b      	str	r3, [r7, #0]
            break;
 80008a6:	e009      	b.n	80008bc <lcd_put_cur+0x50>
        case 2:
        	col |= 0x94;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 80008ae:	603b      	str	r3, [r7, #0]
            break;
 80008b0:	e004      	b.n	80008bc <lcd_put_cur+0x50>
        case 3:
        	col |= 0xd4;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 80008b8:	603b      	str	r3, [r7, #0]
        	break;
 80008ba:	bf00      	nop
    }

    lcd_send_cmd (col);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ffa3 	bl	800080c <lcd_send_cmd>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop

080008d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f023 030f 	bic.w	r3, r3, #15
 80008e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	f043 030d 	orr.w	r3, r3, #13
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	f043 0309 	orr.w	r3, r3, #9
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80008fc:	7bbb      	ldrb	r3, [r7, #14]
 80008fe:	f043 030d 	orr.w	r3, r3, #13
 8000902:	b2db      	uxtb	r3, r3
 8000904:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	f043 0309 	orr.w	r3, r3, #9
 800090c:	b2db      	uxtb	r3, r3
 800090e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000910:	f107 0208 	add.w	r2, r7, #8
 8000914:	2364      	movs	r3, #100	; 0x64
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2304      	movs	r3, #4
 800091a:	214e      	movs	r1, #78	; 0x4e
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <lcd_send_data+0x5c>)
 800091e:	f001 fa2d 	bl	8001d7c <HAL_I2C_Master_Transmit>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000003c 	.word	0x2000003c

08000930 <lcd_clear>:

void lcd_clear (void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ff68 	bl	800080c <lcd_send_cmd>
	for (int i=0; i<100; i++)
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	e005      	b.n	800094e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000942:	2020      	movs	r0, #32
 8000944:	f7ff ffc4 	bl	80008d0 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3301      	adds	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b63      	cmp	r3, #99	; 0x63
 8000952:	ddf6      	ble.n	8000942 <lcd_clear+0x12>
	}
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <lcd_init>:

void lcd_init (void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000960:	2032      	movs	r0, #50	; 0x32
 8000962:	f000 fdeb 	bl	800153c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000966:	2030      	movs	r0, #48	; 0x30
 8000968:	f7ff ff50 	bl	800080c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800096c:	2005      	movs	r0, #5
 800096e:	f000 fde5 	bl	800153c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000972:	2030      	movs	r0, #48	; 0x30
 8000974:	f7ff ff4a 	bl	800080c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000978:	2001      	movs	r0, #1
 800097a:	f000 fddf 	bl	800153c <HAL_Delay>
	lcd_send_cmd (0x30);
 800097e:	2030      	movs	r0, #48	; 0x30
 8000980:	f7ff ff44 	bl	800080c <lcd_send_cmd>
	HAL_Delay(10);
 8000984:	200a      	movs	r0, #10
 8000986:	f000 fdd9 	bl	800153c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800098a:	2020      	movs	r0, #32
 800098c:	f7ff ff3e 	bl	800080c <lcd_send_cmd>
	HAL_Delay(10);
 8000990:	200a      	movs	r0, #10
 8000992:	f000 fdd3 	bl	800153c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000996:	2028      	movs	r0, #40	; 0x28
 8000998:	f7ff ff38 	bl	800080c <lcd_send_cmd>
	HAL_Delay(1);
 800099c:	2001      	movs	r0, #1
 800099e:	f000 fdcd 	bl	800153c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80009a2:	2008      	movs	r0, #8
 80009a4:	f7ff ff32 	bl	800080c <lcd_send_cmd>
	HAL_Delay(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 fdc7 	bl	800153c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff ff2c 	bl	800080c <lcd_send_cmd>
	HAL_Delay(1);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f000 fdc1 	bl	800153c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80009ba:	2006      	movs	r0, #6
 80009bc:	f7ff ff26 	bl	800080c <lcd_send_cmd>
	HAL_Delay(1);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f000 fdbb 	bl	800153c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80009c6:	200c      	movs	r0, #12
 80009c8:	f7ff ff20 	bl	800080c <lcd_send_cmd>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80009d8:	e006      	b.n	80009e8 <lcd_send_string+0x18>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff74 	bl	80008d0 <lcd_send_data>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1f4      	bne.n	80009da <lcd_send_string+0xa>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <main>:
#include "main.h"
#include "hardwareinit.h"
#include "system.h"

int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  system();
 80009fc:	f000 f92c 	bl	8000c58 <system>

  while (1)
 8000a00:	e7fe      	b.n	8000a00 <main+0x8>
	...

08000a04 <HAL_TIM_PeriodElapsedCallback>:
#include "task.h"

TIM_HandleTypeDef htim3;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d105      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		//Task_Init();
		B500();
 8000a16:	f000 f9b3 	bl	8000d80 <B500>
		B1000();
 8000a1a:	f000 f9e3 	bl	8000de4 <B1000>
		Task_Run();
 8000a1e:	f000 fa13 	bl	8000e48 <Task_Run>
		//Button();
	}
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40000400 	.word	0x40000400

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <HAL_I2C_MspInit+0x84>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d12b      	bne.n	8000afa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000abe:	23c0      	movs	r3, #192	; 0xc0
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <HAL_I2C_MspInit+0x8c>)
 8000ada:	f000 fe63 	bl	80017a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40005400 	.word	0x40005400
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020400 	.word	0x40020400

08000b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_TIM_Base_MspInit+0x48>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d115      	bne.n	8000b4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_TIM_Base_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <HAL_TIM_Base_MspInit+0x4c>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_TIM_Base_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	201d      	movs	r0, #29
 8000b44:	f000 fdf7 	bl	8001736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b48:	201d      	movs	r0, #29
 8000b4a:	f000 fe10 	bl	800176e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40000400 	.word	0x40000400
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_UART_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12c      	bne.n	8000bdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000b8c:	f043 0310 	orr.w	r3, r3, #16
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f003 0310 	and.w	r3, r3, #16
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_UART_MspInit+0x8c>)
 8000bd8:	f000 fde4 	bl	80017a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40011000 	.word	0x40011000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 fc5e 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM3_IRQHandler+0x10>)
 8000c4a:	f002 f82a 	bl	8002ca2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000090 	.word	0x20000090

08000c58 <system>:

TIM_HandleTypeDef htim3;
UART_HandleTypeDef huart1;

void system (void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	HAL_Init();
 8000c5c:	f000 fbfc 	bl	8001458 <HAL_Init>
	SystemClock_Config();
 8000c60:	f7ff fc3a 	bl	80004d8 <SystemClock_Config>
	MX_GPIO_Init();
 8000c64:	f7ff fd4a 	bl	80006fc <MX_GPIO_Init>
	MX_I2C1_Init();
 8000c68:	f7ff fc9e 	bl	80005a8 <MX_I2C1_Init>
	MX_TIM3_Init(2);
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff fcc9 	bl	8000604 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000c72:	f7ff fd19 	bl	80006a8 <MX_USART1_UART_Init>

	lcd_init();
 8000c76:	f7ff fe71 	bl	800095c <lcd_init>
	lcd_put_cur(1,3);
 8000c7a:	2103      	movs	r1, #3
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fdf5 	bl	800086c <lcd_put_cur>
	lcd_send_string ("CANDY  MACHINE");
 8000c82:	4828      	ldr	r0, [pc, #160]	; (8000d24 <system+0xcc>)
 8000c84:	f7ff fea4 	bl	80009d0 <lcd_send_string>
	lcd_put_cur(2, 1);
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f7ff fdee 	bl	800086c <lcd_put_cur>
	lcd_send_string("3D4EA | 1110181004");
 8000c90:	4825      	ldr	r0, [pc, #148]	; (8000d28 <system+0xd0>)
 8000c92:	f7ff fe9d 	bl	80009d0 <lcd_send_string>
	HAL_Delay(2500);
 8000c96:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000c9a:	f000 fc4f 	bl	800153c <HAL_Delay>
	lcd_clear ();
 8000c9e:	f7ff fe47 	bl	8000930 <lcd_clear>
	lcd_put_cur(1,3);
 8000ca2:	2103      	movs	r1, #3
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff fde1 	bl	800086c <lcd_put_cur>
	lcd_send_string ("SELAMAT DATANG");
 8000caa:	4820      	ldr	r0, [pc, #128]	; (8000d2c <system+0xd4>)
 8000cac:	f7ff fe90 	bl	80009d0 <lcd_send_string>
	HAL_Delay(1000);
 8000cb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb4:	f000 fc42 	bl	800153c <HAL_Delay>
	lcd_put_cur(2, 3);
 8000cb8:	2103      	movs	r1, #3
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f7ff fdd6 	bl	800086c <lcd_put_cur>
	lcd_send_string ("SELAMAT BELANJA");
 8000cc0:	481b      	ldr	r0, [pc, #108]	; (8000d30 <system+0xd8>)
 8000cc2:	f7ff fe85 	bl	80009d0 <lcd_send_string>
	HAL_Delay(2000);
 8000cc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cca:	f000 fc37 	bl	800153c <HAL_Delay>
	lcd_clear();
 8000cce:	f7ff fe2f 	bl	8000930 <lcd_clear>

	HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r((Tugas Teori Sistem Embedded 2020))",38,10);
 8000cd2:	230a      	movs	r3, #10
 8000cd4:	2226      	movs	r2, #38	; 0x26
 8000cd6:	4917      	ldr	r1, [pc, #92]	; (8000d34 <system+0xdc>)
 8000cd8:	4817      	ldr	r0, [pc, #92]	; (8000d38 <system+0xe0>)
 8000cda:	f002 fbb2 	bl	8003442 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r----------Candy  Machine------------",38,10);
 8000cde:	230a      	movs	r3, #10
 8000ce0:	2226      	movs	r2, #38	; 0x26
 8000ce2:	4916      	ldr	r1, [pc, #88]	; (8000d3c <system+0xe4>)
 8000ce4:	4814      	ldr	r0, [pc, #80]	; (8000d38 <system+0xe0>)
 8000ce6:	f002 fbac 	bl	8003442 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r--------3D4EA---1110181004----------",38,10);
 8000cea:	230a      	movs	r3, #10
 8000cec:	2226      	movs	r2, #38	; 0x26
 8000cee:	4914      	ldr	r1, [pc, #80]	; (8000d40 <system+0xe8>)
 8000cf0:	4811      	ldr	r0, [pc, #68]	; (8000d38 <system+0xe0>)
 8000cf2:	f002 fba6 	bl	8003442 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r----------Masukkan  Uang------------",38,10);
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	2226      	movs	r2, #38	; 0x26
 8000cfa:	4912      	ldr	r1, [pc, #72]	; (8000d44 <system+0xec>)
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <system+0xe0>)
 8000cfe:	f002 fba0 	bl	8003442 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rHarga Permen = Rp.1500",25,10);
 8000d02:	230a      	movs	r3, #10
 8000d04:	2219      	movs	r2, #25
 8000d06:	4910      	ldr	r1, [pc, #64]	; (8000d48 <system+0xf0>)
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <system+0xe0>)
 8000d0a:	f002 fb9a 	bl	8003442 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rUang Anda    = Rp. -  ",25,10);
 8000d0e:	230a      	movs	r3, #10
 8000d10:	2219      	movs	r2, #25
 8000d12:	490e      	ldr	r1, [pc, #56]	; (8000d4c <system+0xf4>)
 8000d14:	4808      	ldr	r0, [pc, #32]	; (8000d38 <system+0xe0>)
 8000d16:	f002 fb94 	bl	8003442 <HAL_UART_Transmit>

	HAL_TIM_Base_Start_IT(&htim3);
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <system+0xf8>)
 8000d1c:	f001 ff9d 	bl	8002c5a <HAL_TIM_Base_Start_IT>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	08003d70 	.word	0x08003d70
 8000d28:	08003d80 	.word	0x08003d80
 8000d2c:	08003d94 	.word	0x08003d94
 8000d30:	08003da4 	.word	0x08003da4
 8000d34:	08003db4 	.word	0x08003db4
 8000d38:	200000d0 	.word	0x200000d0
 8000d3c:	08003ddc 	.word	0x08003ddc
 8000d40:	08003e04 	.word	0x08003e04
 8000d44:	08003e2c 	.word	0x08003e2c
 8000d48:	08003e54 	.word	0x08003e54
 8000d4c:	08003e70 	.word	0x08003e70
 8000d50:	20000090 	.word	0x20000090

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <SystemInit+0x28>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <SystemInit+0x28>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SystemInit+0x28>)
 8000d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <B500>:
unsigned char bouncing2 = 0xFF;
int t_500 = 0;
int t_1000= 0;

void B500 (void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	if (BTN500)
 8000d84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <B500+0x54>)
 8000d8a:	f000 fe8d 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d106      	bne.n	8000da2 <B500+0x22>
	{
		bouncing = (bouncing<<1);
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <B500+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <B500+0x58>)
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e009      	b.n	8000db6 <B500+0x36>
		//LD500_ON;
	}
	else
		bouncing = (bouncing<<1)|1;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <B500+0x58>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <B500+0x58>)
 8000db4:	701a      	strb	r2, [r3, #0]
	if (bouncing==0x03)
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <B500+0x58>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d107      	bne.n	8000dce <B500+0x4e>
	{
		t_500=1;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <B500+0x5c>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
		LD500_ON;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <B500+0x60>)
 8000dca:	f000 fe85 	bl	8001ad8 <HAL_GPIO_WritePin>
	}

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	20000004 	.word	0x20000004
 8000ddc:	20000034 	.word	0x20000034
 8000de0:	40020000 	.word	0x40020000

08000de4 <B1000>:

void B1000 (void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	if (BTN1000)
 8000de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dec:	4812      	ldr	r0, [pc, #72]	; (8000e38 <B1000+0x54>)
 8000dee:	f000 fe5b 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d106      	bne.n	8000e06 <B1000+0x22>
	{
		bouncing2 = (bouncing2<<1);
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <B1000+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <B1000+0x58>)
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e009      	b.n	8000e1a <B1000+0x36>
		//LD1000_ON;
	}
	else
		bouncing2 = (bouncing2<<1)|1;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <B1000+0x58>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <B1000+0x58>)
 8000e18:	701a      	strb	r2, [r3, #0]
	if (bouncing2==0x03)
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <B1000+0x58>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d107      	bne.n	8000e32 <B1000+0x4e>
	{
		t_1000=1;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <B1000+0x5c>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
		LD1000_ON;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2108      	movs	r1, #8
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <B1000+0x60>)
 8000e2e:	f000 fe53 	bl	8001ad8 <HAL_GPIO_WritePin>
	}
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	20000005 	.word	0x20000005
 8000e40:	20000038 	.word	0x20000038
 8000e44:	40020000 	.word	0x40020000

08000e48 <Task_Run>:
	stateku=s0;
	tampilan=t1;
}

void Task_Run (void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	switch (stateku)
 8000e4c:	4bbd      	ldr	r3, [pc, #756]	; (8001144 <Task_Run+0x2fc>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	f200 82a1 	bhi.w	8001398 <Task_Run+0x550>
 8000e56:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <Task_Run+0x14>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000f49 	.word	0x08000f49
 8000e64:	08001021 	.word	0x08001021
 8000e68:	08001115 	.word	0x08001115
 8000e6c:	0800127f 	.word	0x0800127f
	{
		case s0 :
		{
			LD500_OFF;
 8000e70:	2200      	movs	r2, #0
 8000e72:	2102      	movs	r1, #2
 8000e74:	48b4      	ldr	r0, [pc, #720]	; (8001148 <Task_Run+0x300>)
 8000e76:	f000 fe2f 	bl	8001ad8 <HAL_GPIO_WritePin>
			LD1000_OFF;
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	48b2      	ldr	r0, [pc, #712]	; (8001148 <Task_Run+0x300>)
 8000e80:	f000 fe2a 	bl	8001ad8 <HAL_GPIO_WritePin>
			LDBTN_OFF;
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8a:	48b0      	ldr	r0, [pc, #704]	; (800114c <Task_Run+0x304>)
 8000e8c:	f000 fe24 	bl	8001ad8 <HAL_GPIO_WritePin>
			timedelay=0;
 8000e90:	4baf      	ldr	r3, [pc, #700]	; (8001150 <Task_Run+0x308>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
			timedelay2=0;
 8000e96:	4baf      	ldr	r3, [pc, #700]	; (8001154 <Task_Run+0x30c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

			lcd_put_cur(0,3);
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fce4 	bl	800086c <lcd_put_cur>
			lcd_send_string("CANDY  MACHINE");
 8000ea4:	48ac      	ldr	r0, [pc, #688]	; (8001158 <Task_Run+0x310>)
 8000ea6:	f7ff fd93 	bl	80009d0 <lcd_send_string>
			lcd_put_cur(1,0);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff fcdd 	bl	800086c <lcd_put_cur>
			lcd_send_string("---Masukkan  Uang---");
 8000eb2:	48aa      	ldr	r0, [pc, #680]	; (800115c <Task_Run+0x314>)
 8000eb4:	f7ff fd8c 	bl	80009d0 <lcd_send_string>
			lcd_put_cur(2,0);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f7ff fcd6 	bl	800086c <lcd_put_cur>
			lcd_send_string("H. Permen = Rp 1500");
 8000ec0:	48a7      	ldr	r0, [pc, #668]	; (8001160 <Task_Run+0x318>)
 8000ec2:	f7ff fd85 	bl	80009d0 <lcd_send_string>
			lcd_put_cur(3,0);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f7ff fccf 	bl	800086c <lcd_put_cur>
			lcd_send_string("Uang Anda = Rp ");
 8000ece:	48a5      	ldr	r0, [pc, #660]	; (8001164 <Task_Run+0x31c>)
 8000ed0:	f7ff fd7e 	bl	80009d0 <lcd_send_string>

			if(t_500==1)
 8000ed4:	4ba4      	ldr	r3, [pc, #656]	; (8001168 <Task_Run+0x320>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d118      	bne.n	8000f0e <Task_Run+0xc6>
			{
				stateku = s1;
 8000edc:	4b99      	ldr	r3, [pc, #612]	; (8001144 <Task_Run+0x2fc>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
				LDBTN_ON;
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee8:	4898      	ldr	r0, [pc, #608]	; (800114c <Task_Run+0x304>)
 8000eea:	f000 fdf5 	bl	8001ad8 <HAL_GPIO_WritePin>
				LD500_ON;
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4895      	ldr	r0, [pc, #596]	; (8001148 <Task_Run+0x300>)
 8000ef4:	f000 fdf0 	bl	8001ad8 <HAL_GPIO_WritePin>
				t_500 = 0;
 8000ef8:	4b9b      	ldr	r3, [pc, #620]	; (8001168 <Task_Run+0x320>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
				lcd_clear();
 8000efe:	f7ff fd17 	bl	8000930 <lcd_clear>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rUang Anda    = Rp  500",25,10);
 8000f02:	230a      	movs	r3, #10
 8000f04:	2219      	movs	r2, #25
 8000f06:	4999      	ldr	r1, [pc, #612]	; (800116c <Task_Run+0x324>)
 8000f08:	4899      	ldr	r0, [pc, #612]	; (8001170 <Task_Run+0x328>)
 8000f0a:	f002 fa9a 	bl	8003442 <HAL_UART_Transmit>
			}

			if(t_1000==1)
 8000f0e:	4b99      	ldr	r3, [pc, #612]	; (8001174 <Task_Run+0x32c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	f040 823b 	bne.w	800138e <Task_Run+0x546>
			{
				stateku = s2;
 8000f18:	4b8a      	ldr	r3, [pc, #552]	; (8001144 <Task_Run+0x2fc>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	701a      	strb	r2, [r3, #0]
				LDBTN_ON;
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f24:	4889      	ldr	r0, [pc, #548]	; (800114c <Task_Run+0x304>)
 8000f26:	f000 fdd7 	bl	8001ad8 <HAL_GPIO_WritePin>
				LD1000_ON;
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4886      	ldr	r0, [pc, #536]	; (8001148 <Task_Run+0x300>)
 8000f30:	f000 fdd2 	bl	8001ad8 <HAL_GPIO_WritePin>
				t_1000 = 0;
 8000f34:	4b8f      	ldr	r3, [pc, #572]	; (8001174 <Task_Run+0x32c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
				lcd_clear;
				HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rUang Anda    = Rp 1000",25,10);
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	2219      	movs	r2, #25
 8000f3e:	498e      	ldr	r1, [pc, #568]	; (8001178 <Task_Run+0x330>)
 8000f40:	488b      	ldr	r0, [pc, #556]	; (8001170 <Task_Run+0x328>)
 8000f42:	f002 fa7e 	bl	8003442 <HAL_UART_Transmit>
			}
			break;
 8000f46:	e222      	b.n	800138e <Task_Run+0x546>
		}

		case s1 :
		{
			LD500_OFF;
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	487e      	ldr	r0, [pc, #504]	; (8001148 <Task_Run+0x300>)
 8000f4e:	f000 fdc3 	bl	8001ad8 <HAL_GPIO_WritePin>
			LDBTN_OFF;
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f58:	487c      	ldr	r0, [pc, #496]	; (800114c <Task_Run+0x304>)
 8000f5a:	f000 fdbd 	bl	8001ad8 <HAL_GPIO_WritePin>

			lcd_put_cur(0,3);
 8000f5e:	2103      	movs	r1, #3
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff fc83 	bl	800086c <lcd_put_cur>
			lcd_send_string("CANDY  MACHINE");
 8000f66:	487c      	ldr	r0, [pc, #496]	; (8001158 <Task_Run+0x310>)
 8000f68:	f7ff fd32 	bl	80009d0 <lcd_send_string>
			lcd_put_cur(1,0);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f7ff fc7c 	bl	800086c <lcd_put_cur>
			lcd_send_string("---Masukkan  Uang---");
 8000f74:	4879      	ldr	r0, [pc, #484]	; (800115c <Task_Run+0x314>)
 8000f76:	f7ff fd2b 	bl	80009d0 <lcd_send_string>
			lcd_put_cur(2,0);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f7ff fc75 	bl	800086c <lcd_put_cur>
			lcd_send_string("H. Permen = Rp 1500");
 8000f82:	4877      	ldr	r0, [pc, #476]	; (8001160 <Task_Run+0x318>)
 8000f84:	f7ff fd24 	bl	80009d0 <lcd_send_string>
			lcd_put_cur(3,0);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f7ff fc6e 	bl	800086c <lcd_put_cur>
			lcd_send_string("Uang Anda = Rp  500");
 8000f90:	487a      	ldr	r0, [pc, #488]	; (800117c <Task_Run+0x334>)
 8000f92:	f7ff fd1d 	bl	80009d0 <lcd_send_string>

			if(t_500==1)
 8000f96:	4b74      	ldr	r3, [pc, #464]	; (8001168 <Task_Run+0x320>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d118      	bne.n	8000fd0 <Task_Run+0x188>
			{
				stateku = s2;
 8000f9e:	4b69      	ldr	r3, [pc, #420]	; (8001144 <Task_Run+0x2fc>)
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	701a      	strb	r2, [r3, #0]
				LDBTN_ON;
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	4868      	ldr	r0, [pc, #416]	; (800114c <Task_Run+0x304>)
 8000fac:	f000 fd94 	bl	8001ad8 <HAL_GPIO_WritePin>
				LD500_ON;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4864      	ldr	r0, [pc, #400]	; (8001148 <Task_Run+0x300>)
 8000fb6:	f000 fd8f 	bl	8001ad8 <HAL_GPIO_WritePin>
				t_500 = 0;
 8000fba:	4b6b      	ldr	r3, [pc, #428]	; (8001168 <Task_Run+0x320>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
				lcd_clear();
 8000fc0:	f7ff fcb6 	bl	8000930 <lcd_clear>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rUang Anda    = Rp 1000",25,10);
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	2219      	movs	r2, #25
 8000fc8:	496b      	ldr	r1, [pc, #428]	; (8001178 <Task_Run+0x330>)
 8000fca:	4869      	ldr	r0, [pc, #420]	; (8001170 <Task_Run+0x328>)
 8000fcc:	f002 fa39 	bl	8003442 <HAL_UART_Transmit>
			}

			if(t_1000==1)
 8000fd0:	4b68      	ldr	r3, [pc, #416]	; (8001174 <Task_Run+0x32c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	f040 81dc 	bne.w	8001392 <Task_Run+0x54a>
			{
				stateku = s3;
 8000fda:	4b5a      	ldr	r3, [pc, #360]	; (8001144 <Task_Run+0x2fc>)
 8000fdc:	2203      	movs	r2, #3
 8000fde:	701a      	strb	r2, [r3, #0]
				tampilan = t1;
 8000fe0:	4b67      	ldr	r3, [pc, #412]	; (8001180 <Task_Run+0x338>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
				LDBTN_ON;
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fec:	4857      	ldr	r0, [pc, #348]	; (800114c <Task_Run+0x304>)
 8000fee:	f000 fd73 	bl	8001ad8 <HAL_GPIO_WritePin>
				LD1000_ON;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	4854      	ldr	r0, [pc, #336]	; (8001148 <Task_Run+0x300>)
 8000ff8:	f000 fd6e 	bl	8001ad8 <HAL_GPIO_WritePin>
				t_1000 = 0;
 8000ffc:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <Task_Run+0x32c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
				lcd_clear();
 8001002:	f7ff fc95 	bl	8000930 <lcd_clear>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rUang Anda    = Rp 1500",25,10);
 8001006:	230a      	movs	r3, #10
 8001008:	2219      	movs	r2, #25
 800100a:	495e      	ldr	r1, [pc, #376]	; (8001184 <Task_Run+0x33c>)
 800100c:	4858      	ldr	r0, [pc, #352]	; (8001170 <Task_Run+0x328>)
 800100e:	f002 fa18 	bl	8003442 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r---------------PROSES---------------",38,10);
 8001012:	230a      	movs	r3, #10
 8001014:	2226      	movs	r2, #38	; 0x26
 8001016:	495c      	ldr	r1, [pc, #368]	; (8001188 <Task_Run+0x340>)
 8001018:	4855      	ldr	r0, [pc, #340]	; (8001170 <Task_Run+0x328>)
 800101a:	f002 fa12 	bl	8003442 <HAL_UART_Transmit>
			}

			break;
 800101e:	e1b8      	b.n	8001392 <Task_Run+0x54a>
		}

		case s2 :
		{
			LD500_OFF;
 8001020:	2200      	movs	r2, #0
 8001022:	2102      	movs	r1, #2
 8001024:	4848      	ldr	r0, [pc, #288]	; (8001148 <Task_Run+0x300>)
 8001026:	f000 fd57 	bl	8001ad8 <HAL_GPIO_WritePin>
			LD1000_OFF;
 800102a:	2200      	movs	r2, #0
 800102c:	2108      	movs	r1, #8
 800102e:	4846      	ldr	r0, [pc, #280]	; (8001148 <Task_Run+0x300>)
 8001030:	f000 fd52 	bl	8001ad8 <HAL_GPIO_WritePin>
			LDBTN_OFF;
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103a:	4844      	ldr	r0, [pc, #272]	; (800114c <Task_Run+0x304>)
 800103c:	f000 fd4c 	bl	8001ad8 <HAL_GPIO_WritePin>

			lcd_put_cur(0,3);
 8001040:	2103      	movs	r1, #3
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fc12 	bl	800086c <lcd_put_cur>
			lcd_send_string("CANDY  MACHINE");
 8001048:	4843      	ldr	r0, [pc, #268]	; (8001158 <Task_Run+0x310>)
 800104a:	f7ff fcc1 	bl	80009d0 <lcd_send_string>
			lcd_put_cur(1,0);
 800104e:	2100      	movs	r1, #0
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff fc0b 	bl	800086c <lcd_put_cur>
			lcd_send_string("---Masukkan  Uang---");
 8001056:	4841      	ldr	r0, [pc, #260]	; (800115c <Task_Run+0x314>)
 8001058:	f7ff fcba 	bl	80009d0 <lcd_send_string>
			lcd_put_cur(2,0);
 800105c:	2100      	movs	r1, #0
 800105e:	2002      	movs	r0, #2
 8001060:	f7ff fc04 	bl	800086c <lcd_put_cur>
			lcd_send_string("H. Permen = Rp 1500");
 8001064:	483e      	ldr	r0, [pc, #248]	; (8001160 <Task_Run+0x318>)
 8001066:	f7ff fcb3 	bl	80009d0 <lcd_send_string>
			lcd_put_cur(3,0);
 800106a:	2100      	movs	r1, #0
 800106c:	2003      	movs	r0, #3
 800106e:	f7ff fbfd 	bl	800086c <lcd_put_cur>
			lcd_send_string("Uang Anda = Rp 1000");
 8001072:	4846      	ldr	r0, [pc, #280]	; (800118c <Task_Run+0x344>)
 8001074:	f7ff fcac 	bl	80009d0 <lcd_send_string>

			if(t_500==1)
 8001078:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <Task_Run+0x320>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d121      	bne.n	80010c4 <Task_Run+0x27c>
			{
				stateku = s3;
 8001080:	4b30      	ldr	r3, [pc, #192]	; (8001144 <Task_Run+0x2fc>)
 8001082:	2203      	movs	r2, #3
 8001084:	701a      	strb	r2, [r3, #0]
				tampilan = t1;
 8001086:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <Task_Run+0x338>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
				LDBTN_ON;
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001092:	482e      	ldr	r0, [pc, #184]	; (800114c <Task_Run+0x304>)
 8001094:	f000 fd20 	bl	8001ad8 <HAL_GPIO_WritePin>
				LD500_ON;
 8001098:	2201      	movs	r2, #1
 800109a:	2102      	movs	r1, #2
 800109c:	482a      	ldr	r0, [pc, #168]	; (8001148 <Task_Run+0x300>)
 800109e:	f000 fd1b 	bl	8001ad8 <HAL_GPIO_WritePin>
				t_500 = 0;
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <Task_Run+0x320>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
				lcd_clear();
 80010a8:	f7ff fc42 	bl	8000930 <lcd_clear>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rUang Anda    = Rp 1500",25,10);
 80010ac:	230a      	movs	r3, #10
 80010ae:	2219      	movs	r2, #25
 80010b0:	4934      	ldr	r1, [pc, #208]	; (8001184 <Task_Run+0x33c>)
 80010b2:	482f      	ldr	r0, [pc, #188]	; (8001170 <Task_Run+0x328>)
 80010b4:	f002 f9c5 	bl	8003442 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r---------------PROSES---------------",38,10);
 80010b8:	230a      	movs	r3, #10
 80010ba:	2226      	movs	r2, #38	; 0x26
 80010bc:	4932      	ldr	r1, [pc, #200]	; (8001188 <Task_Run+0x340>)
 80010be:	482c      	ldr	r0, [pc, #176]	; (8001170 <Task_Run+0x328>)
 80010c0:	f002 f9bf 	bl	8003442 <HAL_UART_Transmit>
			}

			if(t_1000==1)
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <Task_Run+0x32c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 8164 	bne.w	8001396 <Task_Run+0x54e>
			{
				stateku = s4;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <Task_Run+0x2fc>)
 80010d0:	2204      	movs	r2, #4
 80010d2:	701a      	strb	r2, [r3, #0]
				tampilan = t3;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <Task_Run+0x338>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	701a      	strb	r2, [r3, #0]
				LDBTN_ON;
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e0:	481a      	ldr	r0, [pc, #104]	; (800114c <Task_Run+0x304>)
 80010e2:	f000 fcf9 	bl	8001ad8 <HAL_GPIO_WritePin>
				LD1000_ON;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4817      	ldr	r0, [pc, #92]	; (8001148 <Task_Run+0x300>)
 80010ec:	f000 fcf4 	bl	8001ad8 <HAL_GPIO_WritePin>
				t_1000 = 0;
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <Task_Run+0x32c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
				lcd_clear();
 80010f6:	f7ff fc1b 	bl	8000930 <lcd_clear>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rUang Anda    = Rp 2000",25,10);
 80010fa:	230a      	movs	r3, #10
 80010fc:	2219      	movs	r2, #25
 80010fe:	4924      	ldr	r1, [pc, #144]	; (8001190 <Task_Run+0x348>)
 8001100:	481b      	ldr	r0, [pc, #108]	; (8001170 <Task_Run+0x328>)
 8001102:	f002 f99e 	bl	8003442 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r---------------PROSES---------------",38,10);
 8001106:	230a      	movs	r3, #10
 8001108:	2226      	movs	r2, #38	; 0x26
 800110a:	491f      	ldr	r1, [pc, #124]	; (8001188 <Task_Run+0x340>)
 800110c:	4818      	ldr	r0, [pc, #96]	; (8001170 <Task_Run+0x328>)
 800110e:	f002 f998 	bl	8003442 <HAL_UART_Transmit>
			}
			break;
 8001112:	e140      	b.n	8001396 <Task_Run+0x54e>
		}

		case s3 :
		{
			LDBTN_OFF;
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111a:	480c      	ldr	r0, [pc, #48]	; (800114c <Task_Run+0x304>)
 800111c:	f000 fcdc 	bl	8001ad8 <HAL_GPIO_WritePin>
			LD500_OFF;
 8001120:	2200      	movs	r2, #0
 8001122:	2102      	movs	r1, #2
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <Task_Run+0x300>)
 8001126:	f000 fcd7 	bl	8001ad8 <HAL_GPIO_WritePin>
			LD1000_OFF;
 800112a:	2200      	movs	r2, #0
 800112c:	2108      	movs	r1, #8
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <Task_Run+0x300>)
 8001130:	f000 fcd2 	bl	8001ad8 <HAL_GPIO_WritePin>

			switch (tampilan)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <Task_Run+0x338>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d02b      	beq.n	8001194 <Task_Run+0x34c>
 800113c:	2b01      	cmp	r3, #1
 800113e:	d060      	beq.n	8001202 <Task_Run+0x3ba>
						HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rUang Anda    = Rp  -  ",25,10);
					}
					break;
				}
			}
			break;
 8001140:	e12a      	b.n	8001398 <Task_Run+0x550>
 8001142:	bf00      	nop
 8001144:	20000111 	.word	0x20000111
 8001148:	40020000 	.word	0x40020000
 800114c:	40020800 	.word	0x40020800
 8001150:	2000002c 	.word	0x2000002c
 8001154:	20000030 	.word	0x20000030
 8001158:	08003e8c 	.word	0x08003e8c
 800115c:	08003e9c 	.word	0x08003e9c
 8001160:	08003eb4 	.word	0x08003eb4
 8001164:	08003ec8 	.word	0x08003ec8
 8001168:	20000034 	.word	0x20000034
 800116c:	08003ed8 	.word	0x08003ed8
 8001170:	200000d0 	.word	0x200000d0
 8001174:	20000038 	.word	0x20000038
 8001178:	08003ef4 	.word	0x08003ef4
 800117c:	08003f10 	.word	0x08003f10
 8001180:	20000110 	.word	0x20000110
 8001184:	08003f24 	.word	0x08003f24
 8001188:	08003f40 	.word	0x08003f40
 800118c:	08003f68 	.word	0x08003f68
 8001190:	08003f7c 	.word	0x08003f7c
					lcd_put_cur(0,3);
 8001194:	2103      	movs	r1, #3
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff fb68 	bl	800086c <lcd_put_cur>
					lcd_send_string("CANDY  MACHINE");
 800119c:	487f      	ldr	r0, [pc, #508]	; (800139c <Task_Run+0x554>)
 800119e:	f7ff fc17 	bl	80009d0 <lcd_send_string>
					lcd_put_cur(1,0);
 80011a2:	2100      	movs	r1, #0
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff fb61 	bl	800086c <lcd_put_cur>
					lcd_send_string("(((((((Proses)))))))");
 80011aa:	487d      	ldr	r0, [pc, #500]	; (80013a0 <Task_Run+0x558>)
 80011ac:	f7ff fc10 	bl	80009d0 <lcd_send_string>
					lcd_put_cur(2,0);
 80011b0:	2100      	movs	r1, #0
 80011b2:	2002      	movs	r0, #2
 80011b4:	f7ff fb5a 	bl	800086c <lcd_put_cur>
					lcd_send_string("H. Permen = Rp 1500");
 80011b8:	487a      	ldr	r0, [pc, #488]	; (80013a4 <Task_Run+0x55c>)
 80011ba:	f7ff fc09 	bl	80009d0 <lcd_send_string>
					lcd_put_cur(3,0);
 80011be:	2100      	movs	r1, #0
 80011c0:	2003      	movs	r0, #3
 80011c2:	f7ff fb53 	bl	800086c <lcd_put_cur>
					lcd_send_string("Uang Anda = Rp 1500");
 80011c6:	4878      	ldr	r0, [pc, #480]	; (80013a8 <Task_Run+0x560>)
 80011c8:	f7ff fc02 	bl	80009d0 <lcd_send_string>
					if (++timedelay==delay)
 80011cc:	4b77      	ldr	r3, [pc, #476]	; (80013ac <Task_Run+0x564>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	4a76      	ldr	r2, [pc, #472]	; (80013ac <Task_Run+0x564>)
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b75      	ldr	r3, [pc, #468]	; (80013ac <Task_Run+0x564>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d14b      	bne.n	8001276 <Task_Run+0x42e>
						lcd_clear();
 80011de:	f7ff fba7 	bl	8000930 <lcd_clear>
						tampilan = t2;
 80011e2:	4b73      	ldr	r3, [pc, #460]	; (80013b0 <Task_Run+0x568>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rPembelian Berhasil :)",23,10);
 80011e8:	230a      	movs	r3, #10
 80011ea:	2217      	movs	r2, #23
 80011ec:	4971      	ldr	r1, [pc, #452]	; (80013b4 <Task_Run+0x56c>)
 80011ee:	4872      	ldr	r0, [pc, #456]	; (80013b8 <Task_Run+0x570>)
 80011f0:	f002 f927 	bl	8003442 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTerima Kasih",15,10);
 80011f4:	230a      	movs	r3, #10
 80011f6:	220f      	movs	r2, #15
 80011f8:	4970      	ldr	r1, [pc, #448]	; (80013bc <Task_Run+0x574>)
 80011fa:	486f      	ldr	r0, [pc, #444]	; (80013b8 <Task_Run+0x570>)
 80011fc:	f002 f921 	bl	8003442 <HAL_UART_Transmit>
					break;
 8001200:	e039      	b.n	8001276 <Task_Run+0x42e>
					LDSCS_ON;
 8001202:	2201      	movs	r2, #1
 8001204:	2120      	movs	r1, #32
 8001206:	486e      	ldr	r0, [pc, #440]	; (80013c0 <Task_Run+0x578>)
 8001208:	f000 fc66 	bl	8001ad8 <HAL_GPIO_WritePin>
					lcd_put_cur(1,1);
 800120c:	2101      	movs	r1, #1
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fb2c 	bl	800086c <lcd_put_cur>
					lcd_send_string("Pembelian Berhasil");
 8001214:	486b      	ldr	r0, [pc, #428]	; (80013c4 <Task_Run+0x57c>)
 8001216:	f7ff fbdb 	bl	80009d0 <lcd_send_string>
					lcd_put_cur(2,0);
 800121a:	2100      	movs	r1, #0
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff fb25 	bl	800086c <lcd_put_cur>
					lcd_send_string("Selamat Menikmati :)");
 8001222:	4869      	ldr	r0, [pc, #420]	; (80013c8 <Task_Run+0x580>)
 8001224:	f7ff fbd4 	bl	80009d0 <lcd_send_string>
					if (++timedelay2==delay2)
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <Task_Run+0x584>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3301      	adds	r3, #1
 800122e:	4a67      	ldr	r2, [pc, #412]	; (80013cc <Task_Run+0x584>)
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <Task_Run+0x584>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800123a:	d11e      	bne.n	800127a <Task_Run+0x432>
						LDSCS_OFF;
 800123c:	2200      	movs	r2, #0
 800123e:	2120      	movs	r1, #32
 8001240:	485f      	ldr	r0, [pc, #380]	; (80013c0 <Task_Run+0x578>)
 8001242:	f000 fc49 	bl	8001ad8 <HAL_GPIO_WritePin>
						lcd_clear();
 8001246:	f7ff fb73 	bl	8000930 <lcd_clear>
						stateku = s0;
 800124a:	4b61      	ldr	r3, [pc, #388]	; (80013d0 <Task_Run+0x588>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r\n\r----------Masukkan  Uang------------",40,10);
 8001250:	230a      	movs	r3, #10
 8001252:	2228      	movs	r2, #40	; 0x28
 8001254:	495f      	ldr	r1, [pc, #380]	; (80013d4 <Task_Run+0x58c>)
 8001256:	4858      	ldr	r0, [pc, #352]	; (80013b8 <Task_Run+0x570>)
 8001258:	f002 f8f3 	bl	8003442 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rHarga Permen = Rp 1500",25,10);
 800125c:	230a      	movs	r3, #10
 800125e:	2219      	movs	r2, #25
 8001260:	495d      	ldr	r1, [pc, #372]	; (80013d8 <Task_Run+0x590>)
 8001262:	4855      	ldr	r0, [pc, #340]	; (80013b8 <Task_Run+0x570>)
 8001264:	f002 f8ed 	bl	8003442 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rUang Anda    = Rp  -  ",25,10);
 8001268:	230a      	movs	r3, #10
 800126a:	2219      	movs	r2, #25
 800126c:	495b      	ldr	r1, [pc, #364]	; (80013dc <Task_Run+0x594>)
 800126e:	4852      	ldr	r0, [pc, #328]	; (80013b8 <Task_Run+0x570>)
 8001270:	f002 f8e7 	bl	8003442 <HAL_UART_Transmit>
					break;
 8001274:	e001      	b.n	800127a <Task_Run+0x432>
					break;
 8001276:	bf00      	nop
 8001278:	e08e      	b.n	8001398 <Task_Run+0x550>
					break;
 800127a:	bf00      	nop
			break;
 800127c:	e08c      	b.n	8001398 <Task_Run+0x550>
		}

		case s4 :
		{
			LDBTN_OFF;
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001284:	4856      	ldr	r0, [pc, #344]	; (80013e0 <Task_Run+0x598>)
 8001286:	f000 fc27 	bl	8001ad8 <HAL_GPIO_WritePin>
			LD1000_OFF;
 800128a:	2200      	movs	r2, #0
 800128c:	2108      	movs	r1, #8
 800128e:	484c      	ldr	r0, [pc, #304]	; (80013c0 <Task_Run+0x578>)
 8001290:	f000 fc22 	bl	8001ad8 <HAL_GPIO_WritePin>


			switch (tampilan)
 8001294:	4b46      	ldr	r3, [pc, #280]	; (80013b0 <Task_Run+0x568>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d002      	beq.n	80012a2 <Task_Run+0x45a>
 800129c:	2b03      	cmp	r3, #3
 800129e:	d031      	beq.n	8001304 <Task_Run+0x4bc>
						HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r---------------PROSES---------------",38,10);
					}
					break;
				}
			}
			break;
 80012a0:	e07a      	b.n	8001398 <Task_Run+0x550>
					lcd_put_cur(0,3);
 80012a2:	2103      	movs	r1, #3
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fae1 	bl	800086c <lcd_put_cur>
				    lcd_send_string("CANDY  MACHINE");
 80012aa:	483c      	ldr	r0, [pc, #240]	; (800139c <Task_Run+0x554>)
 80012ac:	f7ff fb90 	bl	80009d0 <lcd_send_string>
				    lcd_put_cur(1,0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fada 	bl	800086c <lcd_put_cur>
				    lcd_send_string("(((((((Proses)))))))");
 80012b8:	4839      	ldr	r0, [pc, #228]	; (80013a0 <Task_Run+0x558>)
 80012ba:	f7ff fb89 	bl	80009d0 <lcd_send_string>
					lcd_put_cur(2,0);
 80012be:	2100      	movs	r1, #0
 80012c0:	2002      	movs	r0, #2
 80012c2:	f7ff fad3 	bl	800086c <lcd_put_cur>
					lcd_send_string("H. Permen = Rp 1500");
 80012c6:	4837      	ldr	r0, [pc, #220]	; (80013a4 <Task_Run+0x55c>)
 80012c8:	f7ff fb82 	bl	80009d0 <lcd_send_string>
					lcd_put_cur(3,0);
 80012cc:	2100      	movs	r1, #0
 80012ce:	2003      	movs	r0, #3
 80012d0:	f7ff facc 	bl	800086c <lcd_put_cur>
					lcd_send_string("Uang Anda = Rp 2000");
 80012d4:	4843      	ldr	r0, [pc, #268]	; (80013e4 <Task_Run+0x59c>)
 80012d6:	f7ff fb7b 	bl	80009d0 <lcd_send_string>
					if (++timedelay==delay)
 80012da:	4b34      	ldr	r3, [pc, #208]	; (80013ac <Task_Run+0x564>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a32      	ldr	r2, [pc, #200]	; (80013ac <Task_Run+0x564>)
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <Task_Run+0x564>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b64      	cmp	r3, #100	; 0x64
 80012ea:	d14c      	bne.n	8001386 <Task_Run+0x53e>
						lcd_clear();
 80012ec:	f7ff fb20 	bl	8000930 <lcd_clear>
						tampilan = t4;
 80012f0:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <Task_Run+0x568>)
 80012f2:	2203      	movs	r2, #3
 80012f4:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rSilahkan ambil uang kembali (Rp 500)",38,10);
 80012f6:	230a      	movs	r3, #10
 80012f8:	2226      	movs	r2, #38	; 0x26
 80012fa:	493b      	ldr	r1, [pc, #236]	; (80013e8 <Task_Run+0x5a0>)
 80012fc:	482e      	ldr	r0, [pc, #184]	; (80013b8 <Task_Run+0x570>)
 80012fe:	f002 f8a0 	bl	8003442 <HAL_UART_Transmit>
					break;
 8001302:	e040      	b.n	8001386 <Task_Run+0x53e>
					LD500_ON;
 8001304:	2201      	movs	r2, #1
 8001306:	2102      	movs	r1, #2
 8001308:	482d      	ldr	r0, [pc, #180]	; (80013c0 <Task_Run+0x578>)
 800130a:	f000 fbe5 	bl	8001ad8 <HAL_GPIO_WritePin>
					lcd_put_cur(0,3);
 800130e:	2103      	movs	r1, #3
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff faab 	bl	800086c <lcd_put_cur>
					lcd_send_string("Silahkan ambil");
 8001316:	4835      	ldr	r0, [pc, #212]	; (80013ec <Task_Run+0x5a4>)
 8001318:	f7ff fb5a 	bl	80009d0 <lcd_send_string>
					lcd_put_cur(1,4);
 800131c:	2104      	movs	r1, #4
 800131e:	2001      	movs	r0, #1
 8001320:	f7ff faa4 	bl	800086c <lcd_put_cur>
					lcd_send_string("Uang Kembali");
 8001324:	4832      	ldr	r0, [pc, #200]	; (80013f0 <Task_Run+0x5a8>)
 8001326:	f7ff fb53 	bl	80009d0 <lcd_send_string>
					lcd_put_cur(3,0);
 800132a:	2100      	movs	r1, #0
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff fa9d 	bl	800086c <lcd_put_cur>
					lcd_send_string("-------Rp 500-------");
 8001332:	4830      	ldr	r0, [pc, #192]	; (80013f4 <Task_Run+0x5ac>)
 8001334:	f7ff fb4c 	bl	80009d0 <lcd_send_string>
					if(t_500==1)
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <Task_Run+0x5b0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d124      	bne.n	800138a <Task_Run+0x542>
						LD500_OFF;
 8001340:	2200      	movs	r2, #0
 8001342:	2102      	movs	r1, #2
 8001344:	481e      	ldr	r0, [pc, #120]	; (80013c0 <Task_Run+0x578>)
 8001346:	f000 fbc7 	bl	8001ad8 <HAL_GPIO_WritePin>
					    stateku = s3;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Task_Run+0x588>)
 800134c:	2203      	movs	r2, #3
 800134e:	701a      	strb	r2, [r3, #0]
					    tampilan = t1;
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <Task_Run+0x568>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
					    timedelay = 0;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <Task_Run+0x564>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
					    timedelay2 = 0;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <Task_Run+0x584>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
						t_500 = 0;
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <Task_Run+0x5b0>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
						lcd_clear();
 8001368:	f7ff fae2 	bl	8000930 <lcd_clear>
						HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rUang kembali (Rp 500) telah diambil",37,10);
 800136c:	230a      	movs	r3, #10
 800136e:	2225      	movs	r2, #37	; 0x25
 8001370:	4922      	ldr	r1, [pc, #136]	; (80013fc <Task_Run+0x5b4>)
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <Task_Run+0x570>)
 8001374:	f002 f865 	bl	8003442 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r---------------PROSES---------------",38,10);
 8001378:	230a      	movs	r3, #10
 800137a:	2226      	movs	r2, #38	; 0x26
 800137c:	4920      	ldr	r1, [pc, #128]	; (8001400 <Task_Run+0x5b8>)
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <Task_Run+0x570>)
 8001380:	f002 f85f 	bl	8003442 <HAL_UART_Transmit>
					break;
 8001384:	e001      	b.n	800138a <Task_Run+0x542>
					break;
 8001386:	bf00      	nop
 8001388:	e006      	b.n	8001398 <Task_Run+0x550>
					break;
 800138a:	bf00      	nop
			break;
 800138c:	e004      	b.n	8001398 <Task_Run+0x550>
			break;
 800138e:	bf00      	nop
 8001390:	e002      	b.n	8001398 <Task_Run+0x550>
			break;
 8001392:	bf00      	nop
 8001394:	e000      	b.n	8001398 <Task_Run+0x550>
			break;
 8001396:	bf00      	nop
		}

	}
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	08003e8c 	.word	0x08003e8c
 80013a0:	08003f98 	.word	0x08003f98
 80013a4:	08003eb4 	.word	0x08003eb4
 80013a8:	08003fb0 	.word	0x08003fb0
 80013ac:	2000002c 	.word	0x2000002c
 80013b0:	20000110 	.word	0x20000110
 80013b4:	08003fc4 	.word	0x08003fc4
 80013b8:	200000d0 	.word	0x200000d0
 80013bc:	08003fdc 	.word	0x08003fdc
 80013c0:	40020000 	.word	0x40020000
 80013c4:	08003fec 	.word	0x08003fec
 80013c8:	08004000 	.word	0x08004000
 80013cc:	20000030 	.word	0x20000030
 80013d0:	20000111 	.word	0x20000111
 80013d4:	08004018 	.word	0x08004018
 80013d8:	08004044 	.word	0x08004044
 80013dc:	08004060 	.word	0x08004060
 80013e0:	40020800 	.word	0x40020800
 80013e4:	0800407c 	.word	0x0800407c
 80013e8:	08004090 	.word	0x08004090
 80013ec:	080040b8 	.word	0x080040b8
 80013f0:	080040c8 	.word	0x080040c8
 80013f4:	080040d8 	.word	0x080040d8
 80013f8:	20000034 	.word	0x20000034
 80013fc:	080040f0 	.word	0x080040f0
 8001400:	08003f40 	.word	0x08003f40

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001408:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800140a:	e003      	b.n	8001414 <LoopCopyDataInit>

0800140c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800140e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001410:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001412:	3104      	adds	r1, #4

08001414 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001418:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800141a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800141c:	d3f6      	bcc.n	800140c <CopyDataInit>
  ldr  r2, =_sbss
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001420:	e002      	b.n	8001428 <LoopFillZerobss>

08001422 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001422:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001424:	f842 3b04 	str.w	r3, [r2], #4

08001428 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800142a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800142c:	d3f9      	bcc.n	8001422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800142e:	f7ff fc91 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001432:	f002 fc65 	bl	8003d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fadf 	bl	80009f8 <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800143c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001440:	08004140 	.word	0x08004140
  ldr  r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001448:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800144c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001450:	20000118 	.word	0x20000118

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f94d 	bl	8001720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 f808 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fad0 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f965 	bl	800178a <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f92d 	bl	8001736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000000 	.word	0x20000000
 80014f4:	2000000c 	.word	0x2000000c
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	2000000c 	.word	0x2000000c
 8001520:	20000114 	.word	0x20000114

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000114 	.word	0x20000114

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_Delay+0x40>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000000c 	.word	0x2000000c

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	60d3      	str	r3, [r2, #12]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	db0b      	blt.n	800160e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 021f 	and.w	r2, r3, #31
 80015fc:	4907      	ldr	r1, [pc, #28]	; (800161c <__NVIC_EnableIRQ+0x38>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2001      	movs	r0, #1
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d301      	bcc.n	80016f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <SysTick_Config+0x40>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fa:	210f      	movs	r1, #15
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f7ff ff8e 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <SysTick_Config+0x40>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SysTick_Config+0x40>)
 800170c:	2207      	movs	r2, #7
 800170e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010

08001720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff29 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001748:	f7ff ff3e 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 800174c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f7ff ff8e 	bl	8001674 <NVIC_EncodePriority>
 8001758:	4602      	mov	r2, r0
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff5d 	bl	8001620 <__NVIC_SetPriority>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff31 	bl	80015e4 <__NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffa2 	bl	80016dc <SysTick_Config>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	e159      	b.n	8001a74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c0:	2201      	movs	r2, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 8148 	bne.w	8001a6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d00b      	beq.n	80017fe <HAL_GPIO_Init+0x5a>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d007      	beq.n	80017fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f2:	2b11      	cmp	r3, #17
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d130      	bne.n	8001860 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001834:	2201      	movs	r2, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 0201 	and.w	r2, r3, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0xfc>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b12      	cmp	r3, #18
 800189e:	d123      	bne.n	80018e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	69b9      	ldr	r1, [r7, #24]
 80018e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0203 	and.w	r2, r3, #3
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a2 	beq.w	8001a6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <HAL_GPIO_Init+0x2e4>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	4a55      	ldr	r2, [pc, #340]	; (8001a88 <HAL_GPIO_Init+0x2e4>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_GPIO_Init+0x2e4>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001946:	4a51      	ldr	r2, [pc, #324]	; (8001a8c <HAL_GPIO_Init+0x2e8>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <HAL_GPIO_Init+0x2ec>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d019      	beq.n	80019a6 <HAL_GPIO_Init+0x202>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a47      	ldr	r2, [pc, #284]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d013      	beq.n	80019a2 <HAL_GPIO_Init+0x1fe>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a46      	ldr	r2, [pc, #280]	; (8001a98 <HAL_GPIO_Init+0x2f4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00d      	beq.n	800199e <HAL_GPIO_Init+0x1fa>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a45      	ldr	r2, [pc, #276]	; (8001a9c <HAL_GPIO_Init+0x2f8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d007      	beq.n	800199a <HAL_GPIO_Init+0x1f6>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a44      	ldr	r2, [pc, #272]	; (8001aa0 <HAL_GPIO_Init+0x2fc>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_GPIO_Init+0x1f2>
 8001992:	2304      	movs	r3, #4
 8001994:	e008      	b.n	80019a8 <HAL_GPIO_Init+0x204>
 8001996:	2307      	movs	r3, #7
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x204>
 800199a:	2303      	movs	r3, #3
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x204>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x204>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x204>
 80019a6:	2300      	movs	r3, #0
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b8:	4934      	ldr	r1, [pc, #208]	; (8001a8c <HAL_GPIO_Init+0x2e8>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ea:	4a2e      	ldr	r2, [pc, #184]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019f0:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a14:	4a23      	ldr	r2, [pc, #140]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3e:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	f67f aea2 	bls.w	80017c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3724      	adds	r7, #36	; 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40013800 	.word	0x40013800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40013c00 	.word	0x40013c00

08001aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e001      	b.n	8001aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af4:	e003      	b.n	8001afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	041a      	lsls	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	619a      	str	r2, [r3, #24]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e11f      	b.n	8001d5e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe ffa4 	bl	8000a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2224      	movs	r2, #36	; 0x24
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b70:	f001 f820 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8001b74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4a7b      	ldr	r2, [pc, #492]	; (8001d68 <HAL_I2C_Init+0x25c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d807      	bhi.n	8001b90 <HAL_I2C_Init+0x84>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4a7a      	ldr	r2, [pc, #488]	; (8001d6c <HAL_I2C_Init+0x260>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	bf94      	ite	ls
 8001b88:	2301      	movls	r3, #1
 8001b8a:	2300      	movhi	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	e006      	b.n	8001b9e <HAL_I2C_Init+0x92>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_I2C_Init+0x264>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf94      	ite	ls
 8001b98:	2301      	movls	r3, #1
 8001b9a:	2300      	movhi	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0db      	b.n	8001d5e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4a72      	ldr	r2, [pc, #456]	; (8001d74 <HAL_I2C_Init+0x268>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0c9b      	lsrs	r3, r3, #18
 8001bb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a64      	ldr	r2, [pc, #400]	; (8001d68 <HAL_I2C_Init+0x25c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d802      	bhi.n	8001be0 <HAL_I2C_Init+0xd4>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	e009      	b.n	8001bf4 <HAL_I2C_Init+0xe8>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	4a63      	ldr	r2, [pc, #396]	; (8001d78 <HAL_I2C_Init+0x26c>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4956      	ldr	r1, [pc, #344]	; (8001d68 <HAL_I2C_Init+0x25c>)
 8001c10:	428b      	cmp	r3, r1
 8001c12:	d80d      	bhi.n	8001c30 <HAL_I2C_Init+0x124>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1e59      	subs	r1, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	bf38      	it	cc
 8001c2c:	2304      	movcc	r3, #4
 8001c2e:	e04f      	b.n	8001cd0 <HAL_I2C_Init+0x1c4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d111      	bne.n	8001c5c <HAL_I2C_Init+0x150>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e58      	subs	r0, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	440b      	add	r3, r1
 8001c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	e012      	b.n	8001c82 <HAL_I2C_Init+0x176>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Init+0x17e>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e022      	b.n	8001cd0 <HAL_I2C_Init+0x1c4>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <HAL_I2C_Init+0x1a4>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e58      	subs	r0, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	440b      	add	r3, r1
 8001ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cae:	e00f      	b.n	8001cd0 <HAL_I2C_Init+0x1c4>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1e58      	subs	r0, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	0099      	lsls	r1, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	6809      	ldr	r1, [r1, #0]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6911      	ldr	r1, [r2, #16]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	000186a0 	.word	0x000186a0
 8001d6c:	001e847f 	.word	0x001e847f
 8001d70:	003d08ff 	.word	0x003d08ff
 8001d74:	431bde83 	.word	0x431bde83
 8001d78:	10624dd3 	.word	0x10624dd3

08001d7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	461a      	mov	r2, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	817b      	strh	r3, [r7, #10]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff fbc8 	bl	8001524 <HAL_GetTick>
 8001d94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	f040 80e0 	bne.w	8001f64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2319      	movs	r3, #25
 8001daa:	2201      	movs	r2, #1
 8001dac:	4970      	ldr	r1, [pc, #448]	; (8001f70 <HAL_I2C_Master_Transmit+0x1f4>)
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f964 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e0d3      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_I2C_Master_Transmit+0x50>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e0cc      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d007      	beq.n	8001df2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2221      	movs	r2, #33	; 0x21
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	893a      	ldrh	r2, [r7, #8]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a50      	ldr	r2, [pc, #320]	; (8001f74 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e34:	8979      	ldrh	r1, [r7, #10]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	6a3a      	ldr	r2, [r7, #32]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f89c 	bl	8001f78 <I2C_MasterRequestWrite>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e08d      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e60:	e066      	b.n	8001f30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f9de 	bl	8002228 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d107      	bne.n	8001e8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06b      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d11b      	bne.n	8001f04 <HAL_I2C_Master_Transmit+0x188>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d017      	beq.n	8001f04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	6a39      	ldr	r1, [r7, #32]
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f9ce 	bl	80022aa <I2C_WaitOnBTFFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e01a      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d194      	bne.n	8001e62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	e000      	b.n	8001f66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f64:	2302      	movs	r3, #2
  }
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	00100002 	.word	0x00100002
 8001f74:	ffff0000 	.word	0xffff0000

08001f78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	460b      	mov	r3, r1
 8001f86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d006      	beq.n	8001fa2 <I2C_MasterRequestWrite+0x2a>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d003      	beq.n	8001fa2 <I2C_MasterRequestWrite+0x2a>
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fa0:	d108      	bne.n	8001fb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e00b      	b.n	8001fcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	2b12      	cmp	r3, #18
 8001fba:	d107      	bne.n	8001fcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f84f 	bl	800207c <I2C_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff2:	d103      	bne.n	8001ffc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e035      	b.n	800206c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002008:	d108      	bne.n	800201c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800200a:	897b      	ldrh	r3, [r7, #10]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002018:	611a      	str	r2, [r3, #16]
 800201a:	e01b      	b.n	8002054 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800201c:	897b      	ldrh	r3, [r7, #10]
 800201e:	11db      	asrs	r3, r3, #7
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f003 0306 	and.w	r3, r3, #6
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f063 030f 	orn	r3, r3, #15
 800202c:	b2da      	uxtb	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	490e      	ldr	r1, [pc, #56]	; (8002074 <I2C_MasterRequestWrite+0xfc>)
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f875 	bl	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e010      	b.n	800206c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <I2C_MasterRequestWrite+0x100>)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f865 	bl	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	00010008 	.word	0x00010008
 8002078:	00010002 	.word	0x00010002

0800207c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800208c:	e025      	b.n	80020da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d021      	beq.n	80020da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7ff fa45 	bl	8001524 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d116      	bne.n	80020da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f043 0220 	orr.w	r2, r3, #32
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e023      	b.n	8002122 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10d      	bne.n	8002100 <I2C_WaitOnFlagUntilTimeout+0x84>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4013      	ands	r3, r2
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf0c      	ite	eq
 80020f6:	2301      	moveq	r3, #1
 80020f8:	2300      	movne	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	e00c      	b.n	800211a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4013      	ands	r3, r2
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf0c      	ite	eq
 8002112:	2301      	moveq	r3, #1
 8002114:	2300      	movne	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	429a      	cmp	r2, r3
 800211e:	d0b6      	beq.n	800208e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002138:	e051      	b.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002148:	d123      	bne.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002158:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002162:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f043 0204 	orr.w	r2, r3, #4
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e046      	b.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d021      	beq.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219a:	f7ff f9c3 	bl	8001524 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d302      	bcc.n	80021b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d116      	bne.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f043 0220 	orr.w	r2, r3, #32
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e020      	b.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10c      	bne.n	8002202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4013      	ands	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	e00b      	b.n	800221a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	43da      	mvns	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4013      	ands	r3, r2
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d18d      	bne.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002234:	e02d      	b.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f878 	bl	800232c <I2C_IsAcknowledgeFailed>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e02d      	b.n	80022a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d021      	beq.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224e:	f7ff f969 	bl	8001524 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	d302      	bcc.n	8002264 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d116      	bne.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0220 	orr.w	r2, r3, #32
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e007      	b.n	80022a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229c:	2b80      	cmp	r3, #128	; 0x80
 800229e:	d1ca      	bne.n	8002236 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022b6:	e02d      	b.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f837 	bl	800232c <I2C_IsAcknowledgeFailed>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e02d      	b.n	8002324 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ce:	d021      	beq.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d0:	f7ff f928 	bl	8001524 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d302      	bcc.n	80022e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d116      	bne.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e007      	b.n	8002324 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d1ca      	bne.n	80022b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002342:	d11b      	bne.n	800237c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800234c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f043 0204 	orr.w	r2, r3, #4
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e25b      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d075      	beq.n	8002496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023aa:	4ba3      	ldr	r3, [pc, #652]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d00c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4ba0      	ldr	r3, [pc, #640]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d112      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b9d      	ldr	r3, [pc, #628]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	4b99      	ldr	r3, [pc, #612]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d05b      	beq.n	8002494 <HAL_RCC_OscConfig+0x108>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d157      	bne.n	8002494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e236      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x74>
 80023f2:	4b91      	ldr	r3, [pc, #580]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a90      	ldr	r2, [pc, #576]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e01d      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b8b      	ldr	r3, [pc, #556]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a8a      	ldr	r2, [pc, #552]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a87      	ldr	r2, [pc, #540]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002424:	4b84      	ldr	r3, [pc, #528]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a83      	ldr	r2, [pc, #524]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b81      	ldr	r3, [pc, #516]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a80      	ldr	r2, [pc, #512]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff f86e 	bl	8001524 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff f86a 	bl	8001524 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1fb      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0xc0>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7ff f85a 	bl	8001524 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff f856 	bl	8001524 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1e7      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	4b6c      	ldr	r3, [pc, #432]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0xe8>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d063      	beq.n	800256a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a2:	4b65      	ldr	r3, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b62      	ldr	r3, [pc, #392]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d11c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b5f      	ldr	r3, [pc, #380]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	4b5c      	ldr	r3, [pc, #368]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e1bb      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	4b56      	ldr	r3, [pc, #344]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4952      	ldr	r1, [pc, #328]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	e03a      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_RCC_OscConfig+0x2b0>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7ff f80f 	bl	8001524 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250a:	f7ff f80b 	bl	8001524 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e19c      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	4b46      	ldr	r3, [pc, #280]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4940      	ldr	r1, [pc, #256]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253e:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_OscConfig+0x2b0>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe ffee 	bl	8001524 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254c:	f7fe ffea 	bl	8001524 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e17b      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d030      	beq.n	80025d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_RCC_OscConfig+0x2b4>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe ffce 	bl	8001524 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258c:	f7fe ffca 	bl	8001524 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e15b      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	4b26      	ldr	r3, [pc, #152]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x200>
 80025aa:	e015      	b.n	80025d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCC_OscConfig+0x2b4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe ffb7 	bl	8001524 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ba:	f7fe ffb3 	bl	8001524 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e144      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a0 	beq.w	8002726 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_OscConfig+0x2b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d121      	bne.n	8002666 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_RCC_OscConfig+0x2b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a07      	ldr	r2, [pc, #28]	; (8002644 <HAL_RCC_OscConfig+0x2b8>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7fe ff79 	bl	8001524 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	e011      	b.n	800265a <HAL_RCC_OscConfig+0x2ce>
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	42470000 	.word	0x42470000
 8002640:	42470e80 	.word	0x42470e80
 8002644:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002648:	f7fe ff6c 	bl	8001524 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0fd      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4b81      	ldr	r3, [pc, #516]	; (8002860 <HAL_RCC_OscConfig+0x4d4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d106      	bne.n	800267c <HAL_RCC_OscConfig+0x2f0>
 800266e:	4b7d      	ldr	r3, [pc, #500]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a7c      	ldr	r2, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
 800267a:	e01c      	b.n	80026b6 <HAL_RCC_OscConfig+0x32a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0x312>
 8002684:	4b77      	ldr	r3, [pc, #476]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a76      	ldr	r2, [pc, #472]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	4b74      	ldr	r3, [pc, #464]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a73      	ldr	r2, [pc, #460]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0x32a>
 800269e:	4b71      	ldr	r3, [pc, #452]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a70      	ldr	r2, [pc, #448]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
 80026aa:	4b6e      	ldr	r3, [pc, #440]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a6d      	ldr	r2, [pc, #436]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d015      	beq.n	80026ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7fe ff31 	bl	8001524 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe ff2d 	bl	8001524 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0bc      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	4b61      	ldr	r3, [pc, #388]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ee      	beq.n	80026c6 <HAL_RCC_OscConfig+0x33a>
 80026e8:	e014      	b.n	8002714 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ea:	f7fe ff1b 	bl	8001524 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe ff17 	bl	8001524 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e0a6      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	4b56      	ldr	r3, [pc, #344]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ee      	bne.n	80026f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d105      	bne.n	8002726 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271a:	4b52      	ldr	r3, [pc, #328]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a51      	ldr	r2, [pc, #324]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8092 	beq.w	8002854 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002730:	4b4c      	ldr	r3, [pc, #304]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b08      	cmp	r3, #8
 800273a:	d05c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d141      	bne.n	80027c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002744:	4b48      	ldr	r3, [pc, #288]	; (8002868 <HAL_RCC_OscConfig+0x4dc>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe feeb 	bl	8001524 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fee7 	bl	8001524 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e078      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	019b      	lsls	r3, r3, #6
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	3b01      	subs	r3, #1
 800278a:	041b      	lsls	r3, r3, #16
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	061b      	lsls	r3, r3, #24
 8002794:	4933      	ldr	r1, [pc, #204]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279a:	4b33      	ldr	r3, [pc, #204]	; (8002868 <HAL_RCC_OscConfig+0x4dc>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fec0 	bl	8001524 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe febc 	bl	8001524 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e04d      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x41c>
 80027c6:	e045      	b.n	8002854 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_OscConfig+0x4dc>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe fea9 	bl	8001524 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe fea5 	bl	8001524 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e036      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e8:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x44a>
 80027f4:	e02e      	b.n	8002854 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e029      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <HAL_RCC_OscConfig+0x4d8>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	429a      	cmp	r2, r3
 8002814:	d11c      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d115      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800282a:	4013      	ands	r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002830:	4293      	cmp	r3, r2
 8002832:	d10d      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d106      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40007000 	.word	0x40007000
 8002864:	40023800 	.word	0x40023800
 8002868:	42470060 	.word	0x42470060

0800286c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0cc      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d90c      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0b8      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e4:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	494d      	ldr	r1, [pc, #308]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d044      	beq.n	800298c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d119      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e07f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d003      	beq.n	800292a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002926:	2b03      	cmp	r3, #3
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292a:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e067      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294a:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f023 0203 	bic.w	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4934      	ldr	r1, [pc, #208]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800295c:	f7fe fde2 	bl	8001524 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	e00a      	b.n	800297a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002964:	f7fe fdde 	bl	8001524 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e04f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 020c 	and.w	r2, r3, #12
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	429a      	cmp	r2, r3
 800298a:	d1eb      	bne.n	8002964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d20c      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e032      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4916      	ldr	r1, [pc, #88]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	490e      	ldr	r1, [pc, #56]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029f2:	f000 f821 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80029f6:	4601      	mov	r1, r0
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	fa21 f303 	lsr.w	r3, r1, r3
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fd42 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023c00 	.word	0x40023c00
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08004118 	.word	0x08004118
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000008 	.word	0x20000008

08002a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	2300      	movs	r3, #0
 8002a48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a4e:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d007      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x32>
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d008      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x38>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 808d 	bne.w	8002b7e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a66:	60bb      	str	r3, [r7, #8]
       break;
 8002a68:	e08c      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a6a:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a6c:	60bb      	str	r3, [r7, #8]
      break;
 8002a6e:	e089      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a70:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7a:	4b45      	ldr	r3, [pc, #276]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d023      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a86:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	099b      	lsrs	r3, r3, #6
 8002a8c:	f04f 0400 	mov.w	r4, #0
 8002a90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	ea03 0501 	and.w	r5, r3, r1
 8002a9c:	ea04 0602 	and.w	r6, r4, r2
 8002aa0:	4a3d      	ldr	r2, [pc, #244]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aa2:	fb02 f106 	mul.w	r1, r2, r6
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	fb02 f205 	mul.w	r2, r2, r5
 8002aac:	440a      	add	r2, r1
 8002aae:	493a      	ldr	r1, [pc, #232]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ab0:	fba5 0101 	umull	r0, r1, r5, r1
 8002ab4:	1853      	adds	r3, r2, r1
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f04f 0400 	mov.w	r4, #0
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4623      	mov	r3, r4
 8002ac2:	f7fd fb89 	bl	80001d8 <__aeabi_uldivmod>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	460c      	mov	r4, r1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e049      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	f04f 0400 	mov.w	r4, #0
 8002ad8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	ea03 0501 	and.w	r5, r3, r1
 8002ae4:	ea04 0602 	and.w	r6, r4, r2
 8002ae8:	4629      	mov	r1, r5
 8002aea:	4632      	mov	r2, r6
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	f04f 0400 	mov.w	r4, #0
 8002af4:	0154      	lsls	r4, r2, #5
 8002af6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002afa:	014b      	lsls	r3, r1, #5
 8002afc:	4619      	mov	r1, r3
 8002afe:	4622      	mov	r2, r4
 8002b00:	1b49      	subs	r1, r1, r5
 8002b02:	eb62 0206 	sbc.w	r2, r2, r6
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	f04f 0400 	mov.w	r4, #0
 8002b0e:	0194      	lsls	r4, r2, #6
 8002b10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b14:	018b      	lsls	r3, r1, #6
 8002b16:	1a5b      	subs	r3, r3, r1
 8002b18:	eb64 0402 	sbc.w	r4, r4, r2
 8002b1c:	f04f 0100 	mov.w	r1, #0
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	00e2      	lsls	r2, r4, #3
 8002b26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b2a:	00d9      	lsls	r1, r3, #3
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4614      	mov	r4, r2
 8002b30:	195b      	adds	r3, r3, r5
 8002b32:	eb44 0406 	adc.w	r4, r4, r6
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	02a2      	lsls	r2, r4, #10
 8002b40:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b44:	0299      	lsls	r1, r3, #10
 8002b46:	460b      	mov	r3, r1
 8002b48:	4614      	mov	r4, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f04f 0400 	mov.w	r4, #0
 8002b54:	461a      	mov	r2, r3
 8002b56:	4623      	mov	r3, r4
 8002b58:	f7fd fb3e 	bl	80001d8 <__aeabi_uldivmod>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	460c      	mov	r4, r1
 8002b60:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	0c1b      	lsrs	r3, r3, #16
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	60bb      	str	r3, [r7, #8]
      break;
 8002b7c:	e002      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b80:	60bb      	str	r3, [r7, #8]
      break;
 8002b82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b84:	68bb      	ldr	r3, [r7, #8]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	017d7840 	.word	0x017d7840

08002b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000000 	.word	0x20000000

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bb8:	f7ff fff0 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0a9b      	lsrs	r3, r3, #10
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4a03      	ldr	r2, [pc, #12]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	08004128 	.word	0x08004128

08002bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002be0:	f7ff ffdc 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002be4:	4601      	mov	r1, r0
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	0b5b      	lsrs	r3, r3, #13
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4a03      	ldr	r2, [pc, #12]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	08004128 	.word	0x08004128

08002c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e01d      	b.n	8002c52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fd ff70 	bl	8000b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 fa14 	bl	8003070 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b06      	cmp	r3, #6
 8002c82:	d007      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d122      	bne.n	8002cfe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d11b      	bne.n	8002cfe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f06f 0202 	mvn.w	r2, #2
 8002cce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f9a5 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002cea:	e005      	b.n	8002cf8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f997 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f9a8 	bl	8003048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d122      	bne.n	8002d52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d11b      	bne.n	8002d52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f06f 0204 	mvn.w	r2, #4
 8002d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f97b 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002d3e:	e005      	b.n	8002d4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f96d 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f97e 	bl	8003048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d122      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d11b      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f06f 0208 	mvn.w	r2, #8
 8002d76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f951 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002d92:	e005      	b.n	8002da0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f943 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f954 	bl	8003048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d122      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d11b      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f06f 0210 	mvn.w	r2, #16
 8002dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2208      	movs	r2, #8
 8002dd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f927 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002de6:	e005      	b.n	8002df4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f919 	bl	8003020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f92a 	bl	8003048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d10e      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d107      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0201 	mvn.w	r2, #1
 8002e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fd fdef 	bl	8000a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d10e      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	2b80      	cmp	r3, #128	; 0x80
 8002e40:	d107      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 faa1 	bl	8003394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d10e      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	d107      	bne.n	8002e7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8ef 	bl	800305c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d10e      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d107      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f06f 0220 	mvn.w	r2, #32
 8002ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa6b 	bl	8003380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_TIM_ConfigClockSource+0x18>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0a6      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x166>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ee8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ef0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d067      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x120>
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	d80b      	bhi.n	8002f1e <HAL_TIM_ConfigClockSource+0x6c>
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d073      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x140>
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d802      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x62>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d06f      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f12:	e078      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d06c      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x140>
 8002f18:	2b30      	cmp	r3, #48	; 0x30
 8002f1a:	d06a      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f1c:	e073      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f1e:	2b70      	cmp	r3, #112	; 0x70
 8002f20:	d00d      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x8c>
 8002f22:	2b70      	cmp	r3, #112	; 0x70
 8002f24:	d804      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x7e>
 8002f26:	2b50      	cmp	r3, #80	; 0x50
 8002f28:	d033      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0xe0>
 8002f2a:	2b60      	cmp	r3, #96	; 0x60
 8002f2c:	d041      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f2e:	e06a      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f34:	d066      	beq.n	8003004 <HAL_TIM_ConfigClockSource+0x152>
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3a:	d017      	beq.n	8002f6c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f3c:	e063      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6899      	ldr	r1, [r3, #8]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f000 f989 	bl	8003264 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	609a      	str	r2, [r3, #8]
      break;
 8002f6a:	e04c      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6899      	ldr	r1, [r3, #8]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f000 f972 	bl	8003264 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8e:	609a      	str	r2, [r3, #8]
      break;
 8002f90:	e039      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 f8e6 	bl	8003170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2150      	movs	r1, #80	; 0x50
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f93f 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e029      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f000 f905 	bl	80031ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2160      	movs	r1, #96	; 0x60
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f92f 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e019      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f000 f8c6 	bl	8003170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2140      	movs	r1, #64	; 0x40
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f91f 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002ff0:	e009      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f000 f916 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8003002:	e000      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003004:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a34      	ldr	r2, [pc, #208]	; (8003154 <TIM_Base_SetConfig+0xe4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00f      	beq.n	80030a8 <TIM_Base_SetConfig+0x38>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308e:	d00b      	beq.n	80030a8 <TIM_Base_SetConfig+0x38>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a31      	ldr	r2, [pc, #196]	; (8003158 <TIM_Base_SetConfig+0xe8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d007      	beq.n	80030a8 <TIM_Base_SetConfig+0x38>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a30      	ldr	r2, [pc, #192]	; (800315c <TIM_Base_SetConfig+0xec>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_Base_SetConfig+0x38>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a2f      	ldr	r2, [pc, #188]	; (8003160 <TIM_Base_SetConfig+0xf0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d108      	bne.n	80030ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <TIM_Base_SetConfig+0xe4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01b      	beq.n	80030fa <TIM_Base_SetConfig+0x8a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c8:	d017      	beq.n	80030fa <TIM_Base_SetConfig+0x8a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a22      	ldr	r2, [pc, #136]	; (8003158 <TIM_Base_SetConfig+0xe8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <TIM_Base_SetConfig+0x8a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a21      	ldr	r2, [pc, #132]	; (800315c <TIM_Base_SetConfig+0xec>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00f      	beq.n	80030fa <TIM_Base_SetConfig+0x8a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a20      	ldr	r2, [pc, #128]	; (8003160 <TIM_Base_SetConfig+0xf0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00b      	beq.n	80030fa <TIM_Base_SetConfig+0x8a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <TIM_Base_SetConfig+0xf4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <TIM_Base_SetConfig+0x8a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <TIM_Base_SetConfig+0xf8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d003      	beq.n	80030fa <TIM_Base_SetConfig+0x8a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	; (800316c <TIM_Base_SetConfig+0xfc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d108      	bne.n	800310c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a08      	ldr	r2, [pc, #32]	; (8003154 <TIM_Base_SetConfig+0xe4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d103      	bne.n	8003140 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	615a      	str	r2, [r3, #20]
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40010000 	.word	0x40010000
 8003158:	40000400 	.word	0x40000400
 800315c:	40000800 	.word	0x40000800
 8003160:	40000c00 	.word	0x40000c00
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800

08003170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0201 	bic.w	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800319a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f023 030a 	bic.w	r3, r3, #10
 80031ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b087      	sub	sp, #28
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f023 0210 	bic.w	r2, r3, #16
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	031b      	lsls	r3, r3, #12
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800320a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	f043 0307 	orr.w	r3, r3, #7
 8003250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	609a      	str	r2, [r3, #8]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	021a      	lsls	r2, r3, #8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	431a      	orrs	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e050      	b.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1c      	ldr	r2, [pc, #112]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d018      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003308:	d013      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a18      	ldr	r2, [pc, #96]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a15      	ldr	r2, [pc, #84]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a13      	ldr	r2, [pc, #76]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10c      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4313      	orrs	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800
 8003378:	40000c00 	.word	0x40000c00
 800337c:	40014000 	.word	0x40014000

08003380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e03f      	b.n	800343a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fbc6 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2224      	movs	r2, #36	; 0x24
 80033d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f90b 	bl	8003608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b088      	sub	sp, #32
 8003446:	af02      	add	r7, sp, #8
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	f040 8083 	bne.w	800356a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_UART_Transmit+0x2e>
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e07b      	b.n	800356c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_UART_Transmit+0x40>
 800347e:	2302      	movs	r3, #2
 8003480:	e074      	b.n	800356c <HAL_UART_Transmit+0x12a>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2221      	movs	r2, #33	; 0x21
 8003494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003498:	f7fe f844 	bl	8001524 <HAL_GetTick>
 800349c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	88fa      	ldrh	r2, [r7, #6]
 80034a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034b2:	e042      	b.n	800353a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ca:	d122      	bne.n	8003512 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	2180      	movs	r1, #128	; 0x80
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f84c 	bl	8003574 <UART_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e042      	b.n	800356c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	3302      	adds	r3, #2
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	e017      	b.n	800353a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3301      	adds	r3, #1
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	e013      	b.n	800353a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f829 	bl	8003574 <UART_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e01f      	b.n	800356c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	60ba      	str	r2, [r7, #8]
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1b7      	bne.n	80034b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2200      	movs	r2, #0
 800354c:	2140      	movs	r1, #64	; 0x40
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f810 	bl	8003574 <UART_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e006      	b.n	800356c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e000      	b.n	800356c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800356a:	2302      	movs	r3, #2
  }
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003584:	e02c      	b.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358c:	d028      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003594:	f7fd ffc6 	bl	8001524 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d21d      	bcs.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e00f      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d0c3      	beq.n	8003586 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800364a:	f023 030c 	bic.w	r3, r3, #12
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	68f9      	ldr	r1, [r7, #12]
 8003654:	430b      	orrs	r3, r1
 8003656:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003676:	f040 818b 	bne.w	8003990 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4ac1      	ldr	r2, [pc, #772]	; (8003984 <UART_SetConfig+0x37c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d005      	beq.n	8003690 <UART_SetConfig+0x88>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4abf      	ldr	r2, [pc, #764]	; (8003988 <UART_SetConfig+0x380>)
 800368a:	4293      	cmp	r3, r2
 800368c:	f040 80bd 	bne.w	800380a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003690:	f7ff faa4 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 8003694:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	461d      	mov	r5, r3
 800369a:	f04f 0600 	mov.w	r6, #0
 800369e:	46a8      	mov	r8, r5
 80036a0:	46b1      	mov	r9, r6
 80036a2:	eb18 0308 	adds.w	r3, r8, r8
 80036a6:	eb49 0409 	adc.w	r4, r9, r9
 80036aa:	4698      	mov	r8, r3
 80036ac:	46a1      	mov	r9, r4
 80036ae:	eb18 0805 	adds.w	r8, r8, r5
 80036b2:	eb49 0906 	adc.w	r9, r9, r6
 80036b6:	f04f 0100 	mov.w	r1, #0
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036ca:	4688      	mov	r8, r1
 80036cc:	4691      	mov	r9, r2
 80036ce:	eb18 0005 	adds.w	r0, r8, r5
 80036d2:	eb49 0106 	adc.w	r1, r9, r6
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	461d      	mov	r5, r3
 80036dc:	f04f 0600 	mov.w	r6, #0
 80036e0:	196b      	adds	r3, r5, r5
 80036e2:	eb46 0406 	adc.w	r4, r6, r6
 80036e6:	461a      	mov	r2, r3
 80036e8:	4623      	mov	r3, r4
 80036ea:	f7fc fd75 	bl	80001d8 <__aeabi_uldivmod>
 80036ee:	4603      	mov	r3, r0
 80036f0:	460c      	mov	r4, r1
 80036f2:	461a      	mov	r2, r3
 80036f4:	4ba5      	ldr	r3, [pc, #660]	; (800398c <UART_SetConfig+0x384>)
 80036f6:	fba3 2302 	umull	r2, r3, r3, r2
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	461d      	mov	r5, r3
 8003704:	f04f 0600 	mov.w	r6, #0
 8003708:	46a9      	mov	r9, r5
 800370a:	46b2      	mov	sl, r6
 800370c:	eb19 0309 	adds.w	r3, r9, r9
 8003710:	eb4a 040a 	adc.w	r4, sl, sl
 8003714:	4699      	mov	r9, r3
 8003716:	46a2      	mov	sl, r4
 8003718:	eb19 0905 	adds.w	r9, r9, r5
 800371c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800372c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003730:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003734:	4689      	mov	r9, r1
 8003736:	4692      	mov	sl, r2
 8003738:	eb19 0005 	adds.w	r0, r9, r5
 800373c:	eb4a 0106 	adc.w	r1, sl, r6
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	461d      	mov	r5, r3
 8003746:	f04f 0600 	mov.w	r6, #0
 800374a:	196b      	adds	r3, r5, r5
 800374c:	eb46 0406 	adc.w	r4, r6, r6
 8003750:	461a      	mov	r2, r3
 8003752:	4623      	mov	r3, r4
 8003754:	f7fc fd40 	bl	80001d8 <__aeabi_uldivmod>
 8003758:	4603      	mov	r3, r0
 800375a:	460c      	mov	r4, r1
 800375c:	461a      	mov	r2, r3
 800375e:	4b8b      	ldr	r3, [pc, #556]	; (800398c <UART_SetConfig+0x384>)
 8003760:	fba3 1302 	umull	r1, r3, r3, r2
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	2164      	movs	r1, #100	; 0x64
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	3332      	adds	r3, #50	; 0x32
 8003772:	4a86      	ldr	r2, [pc, #536]	; (800398c <UART_SetConfig+0x384>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003780:	4498      	add	r8, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	461d      	mov	r5, r3
 8003786:	f04f 0600 	mov.w	r6, #0
 800378a:	46a9      	mov	r9, r5
 800378c:	46b2      	mov	sl, r6
 800378e:	eb19 0309 	adds.w	r3, r9, r9
 8003792:	eb4a 040a 	adc.w	r4, sl, sl
 8003796:	4699      	mov	r9, r3
 8003798:	46a2      	mov	sl, r4
 800379a:	eb19 0905 	adds.w	r9, r9, r5
 800379e:	eb4a 0a06 	adc.w	sl, sl, r6
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037b6:	4689      	mov	r9, r1
 80037b8:	4692      	mov	sl, r2
 80037ba:	eb19 0005 	adds.w	r0, r9, r5
 80037be:	eb4a 0106 	adc.w	r1, sl, r6
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	461d      	mov	r5, r3
 80037c8:	f04f 0600 	mov.w	r6, #0
 80037cc:	196b      	adds	r3, r5, r5
 80037ce:	eb46 0406 	adc.w	r4, r6, r6
 80037d2:	461a      	mov	r2, r3
 80037d4:	4623      	mov	r3, r4
 80037d6:	f7fc fcff 	bl	80001d8 <__aeabi_uldivmod>
 80037da:	4603      	mov	r3, r0
 80037dc:	460c      	mov	r4, r1
 80037de:	461a      	mov	r2, r3
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <UART_SetConfig+0x384>)
 80037e2:	fba3 1302 	umull	r1, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2164      	movs	r1, #100	; 0x64
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	3332      	adds	r3, #50	; 0x32
 80037f4:	4a65      	ldr	r2, [pc, #404]	; (800398c <UART_SetConfig+0x384>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	f003 0207 	and.w	r2, r3, #7
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4442      	add	r2, r8
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	e26f      	b.n	8003cea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800380a:	f7ff f9d3 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 800380e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	461d      	mov	r5, r3
 8003814:	f04f 0600 	mov.w	r6, #0
 8003818:	46a8      	mov	r8, r5
 800381a:	46b1      	mov	r9, r6
 800381c:	eb18 0308 	adds.w	r3, r8, r8
 8003820:	eb49 0409 	adc.w	r4, r9, r9
 8003824:	4698      	mov	r8, r3
 8003826:	46a1      	mov	r9, r4
 8003828:	eb18 0805 	adds.w	r8, r8, r5
 800382c:	eb49 0906 	adc.w	r9, r9, r6
 8003830:	f04f 0100 	mov.w	r1, #0
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800383c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003840:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003844:	4688      	mov	r8, r1
 8003846:	4691      	mov	r9, r2
 8003848:	eb18 0005 	adds.w	r0, r8, r5
 800384c:	eb49 0106 	adc.w	r1, r9, r6
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	461d      	mov	r5, r3
 8003856:	f04f 0600 	mov.w	r6, #0
 800385a:	196b      	adds	r3, r5, r5
 800385c:	eb46 0406 	adc.w	r4, r6, r6
 8003860:	461a      	mov	r2, r3
 8003862:	4623      	mov	r3, r4
 8003864:	f7fc fcb8 	bl	80001d8 <__aeabi_uldivmod>
 8003868:	4603      	mov	r3, r0
 800386a:	460c      	mov	r4, r1
 800386c:	461a      	mov	r2, r3
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <UART_SetConfig+0x384>)
 8003870:	fba3 2302 	umull	r2, r3, r3, r2
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	461d      	mov	r5, r3
 800387e:	f04f 0600 	mov.w	r6, #0
 8003882:	46a9      	mov	r9, r5
 8003884:	46b2      	mov	sl, r6
 8003886:	eb19 0309 	adds.w	r3, r9, r9
 800388a:	eb4a 040a 	adc.w	r4, sl, sl
 800388e:	4699      	mov	r9, r3
 8003890:	46a2      	mov	sl, r4
 8003892:	eb19 0905 	adds.w	r9, r9, r5
 8003896:	eb4a 0a06 	adc.w	sl, sl, r6
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ae:	4689      	mov	r9, r1
 80038b0:	4692      	mov	sl, r2
 80038b2:	eb19 0005 	adds.w	r0, r9, r5
 80038b6:	eb4a 0106 	adc.w	r1, sl, r6
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	461d      	mov	r5, r3
 80038c0:	f04f 0600 	mov.w	r6, #0
 80038c4:	196b      	adds	r3, r5, r5
 80038c6:	eb46 0406 	adc.w	r4, r6, r6
 80038ca:	461a      	mov	r2, r3
 80038cc:	4623      	mov	r3, r4
 80038ce:	f7fc fc83 	bl	80001d8 <__aeabi_uldivmod>
 80038d2:	4603      	mov	r3, r0
 80038d4:	460c      	mov	r4, r1
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b2c      	ldr	r3, [pc, #176]	; (800398c <UART_SetConfig+0x384>)
 80038da:	fba3 1302 	umull	r1, r3, r3, r2
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2164      	movs	r1, #100	; 0x64
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	3332      	adds	r3, #50	; 0x32
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <UART_SetConfig+0x384>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038fa:	4498      	add	r8, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	461d      	mov	r5, r3
 8003900:	f04f 0600 	mov.w	r6, #0
 8003904:	46a9      	mov	r9, r5
 8003906:	46b2      	mov	sl, r6
 8003908:	eb19 0309 	adds.w	r3, r9, r9
 800390c:	eb4a 040a 	adc.w	r4, sl, sl
 8003910:	4699      	mov	r9, r3
 8003912:	46a2      	mov	sl, r4
 8003914:	eb19 0905 	adds.w	r9, r9, r5
 8003918:	eb4a 0a06 	adc.w	sl, sl, r6
 800391c:	f04f 0100 	mov.w	r1, #0
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003928:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800392c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003930:	4689      	mov	r9, r1
 8003932:	4692      	mov	sl, r2
 8003934:	eb19 0005 	adds.w	r0, r9, r5
 8003938:	eb4a 0106 	adc.w	r1, sl, r6
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	461d      	mov	r5, r3
 8003942:	f04f 0600 	mov.w	r6, #0
 8003946:	196b      	adds	r3, r5, r5
 8003948:	eb46 0406 	adc.w	r4, r6, r6
 800394c:	461a      	mov	r2, r3
 800394e:	4623      	mov	r3, r4
 8003950:	f7fc fc42 	bl	80001d8 <__aeabi_uldivmod>
 8003954:	4603      	mov	r3, r0
 8003956:	460c      	mov	r4, r1
 8003958:	461a      	mov	r2, r3
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <UART_SetConfig+0x384>)
 800395c:	fba3 1302 	umull	r1, r3, r3, r2
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	2164      	movs	r1, #100	; 0x64
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	3332      	adds	r3, #50	; 0x32
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <UART_SetConfig+0x384>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	f003 0207 	and.w	r2, r3, #7
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4442      	add	r2, r8
 8003980:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003982:	e1b2      	b.n	8003cea <UART_SetConfig+0x6e2>
 8003984:	40011000 	.word	0x40011000
 8003988:	40011400 	.word	0x40011400
 800398c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4ad7      	ldr	r2, [pc, #860]	; (8003cf4 <UART_SetConfig+0x6ec>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d005      	beq.n	80039a6 <UART_SetConfig+0x39e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4ad6      	ldr	r2, [pc, #856]	; (8003cf8 <UART_SetConfig+0x6f0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	f040 80d1 	bne.w	8003b48 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039a6:	f7ff f919 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 80039aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	469a      	mov	sl, r3
 80039b0:	f04f 0b00 	mov.w	fp, #0
 80039b4:	46d0      	mov	r8, sl
 80039b6:	46d9      	mov	r9, fp
 80039b8:	eb18 0308 	adds.w	r3, r8, r8
 80039bc:	eb49 0409 	adc.w	r4, r9, r9
 80039c0:	4698      	mov	r8, r3
 80039c2:	46a1      	mov	r9, r4
 80039c4:	eb18 080a 	adds.w	r8, r8, sl
 80039c8:	eb49 090b 	adc.w	r9, r9, fp
 80039cc:	f04f 0100 	mov.w	r1, #0
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039e0:	4688      	mov	r8, r1
 80039e2:	4691      	mov	r9, r2
 80039e4:	eb1a 0508 	adds.w	r5, sl, r8
 80039e8:	eb4b 0609 	adc.w	r6, fp, r9
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	f04f 0400 	mov.w	r4, #0
 80039fe:	0094      	lsls	r4, r2, #2
 8003a00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a04:	008b      	lsls	r3, r1, #2
 8003a06:	461a      	mov	r2, r3
 8003a08:	4623      	mov	r3, r4
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	4631      	mov	r1, r6
 8003a0e:	f7fc fbe3 	bl	80001d8 <__aeabi_uldivmod>
 8003a12:	4603      	mov	r3, r0
 8003a14:	460c      	mov	r4, r1
 8003a16:	461a      	mov	r2, r3
 8003a18:	4bb8      	ldr	r3, [pc, #736]	; (8003cfc <UART_SetConfig+0x6f4>)
 8003a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	469b      	mov	fp, r3
 8003a28:	f04f 0c00 	mov.w	ip, #0
 8003a2c:	46d9      	mov	r9, fp
 8003a2e:	46e2      	mov	sl, ip
 8003a30:	eb19 0309 	adds.w	r3, r9, r9
 8003a34:	eb4a 040a 	adc.w	r4, sl, sl
 8003a38:	4699      	mov	r9, r3
 8003a3a:	46a2      	mov	sl, r4
 8003a3c:	eb19 090b 	adds.w	r9, r9, fp
 8003a40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a44:	f04f 0100 	mov.w	r1, #0
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a58:	4689      	mov	r9, r1
 8003a5a:	4692      	mov	sl, r2
 8003a5c:	eb1b 0509 	adds.w	r5, fp, r9
 8003a60:	eb4c 060a 	adc.w	r6, ip, sl
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	f04f 0400 	mov.w	r4, #0
 8003a76:	0094      	lsls	r4, r2, #2
 8003a78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a7c:	008b      	lsls	r3, r1, #2
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4623      	mov	r3, r4
 8003a82:	4628      	mov	r0, r5
 8003a84:	4631      	mov	r1, r6
 8003a86:	f7fc fba7 	bl	80001d8 <__aeabi_uldivmod>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b9a      	ldr	r3, [pc, #616]	; (8003cfc <UART_SetConfig+0x6f4>)
 8003a92:	fba3 1302 	umull	r1, r3, r3, r2
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2164      	movs	r1, #100	; 0x64
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	3332      	adds	r3, #50	; 0x32
 8003aa4:	4a95      	ldr	r2, [pc, #596]	; (8003cfc <UART_SetConfig+0x6f4>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab0:	4498      	add	r8, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	469b      	mov	fp, r3
 8003ab6:	f04f 0c00 	mov.w	ip, #0
 8003aba:	46d9      	mov	r9, fp
 8003abc:	46e2      	mov	sl, ip
 8003abe:	eb19 0309 	adds.w	r3, r9, r9
 8003ac2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ac6:	4699      	mov	r9, r3
 8003ac8:	46a2      	mov	sl, r4
 8003aca:	eb19 090b 	adds.w	r9, r9, fp
 8003ace:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ad2:	f04f 0100 	mov.w	r1, #0
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ade:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ae2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ae6:	4689      	mov	r9, r1
 8003ae8:	4692      	mov	sl, r2
 8003aea:	eb1b 0509 	adds.w	r5, fp, r9
 8003aee:	eb4c 060a 	adc.w	r6, ip, sl
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4619      	mov	r1, r3
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	f04f 0400 	mov.w	r4, #0
 8003b04:	0094      	lsls	r4, r2, #2
 8003b06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b0a:	008b      	lsls	r3, r1, #2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4623      	mov	r3, r4
 8003b10:	4628      	mov	r0, r5
 8003b12:	4631      	mov	r1, r6
 8003b14:	f7fc fb60 	bl	80001d8 <__aeabi_uldivmod>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b77      	ldr	r3, [pc, #476]	; (8003cfc <UART_SetConfig+0x6f4>)
 8003b20:	fba3 1302 	umull	r1, r3, r3, r2
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	2164      	movs	r1, #100	; 0x64
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	3332      	adds	r3, #50	; 0x32
 8003b32:	4a72      	ldr	r2, [pc, #456]	; (8003cfc <UART_SetConfig+0x6f4>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	f003 020f 	and.w	r2, r3, #15
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4442      	add	r2, r8
 8003b44:	609a      	str	r2, [r3, #8]
 8003b46:	e0d0      	b.n	8003cea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b48:	f7ff f834 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8003b4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	469a      	mov	sl, r3
 8003b52:	f04f 0b00 	mov.w	fp, #0
 8003b56:	46d0      	mov	r8, sl
 8003b58:	46d9      	mov	r9, fp
 8003b5a:	eb18 0308 	adds.w	r3, r8, r8
 8003b5e:	eb49 0409 	adc.w	r4, r9, r9
 8003b62:	4698      	mov	r8, r3
 8003b64:	46a1      	mov	r9, r4
 8003b66:	eb18 080a 	adds.w	r8, r8, sl
 8003b6a:	eb49 090b 	adc.w	r9, r9, fp
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b82:	4688      	mov	r8, r1
 8003b84:	4691      	mov	r9, r2
 8003b86:	eb1a 0508 	adds.w	r5, sl, r8
 8003b8a:	eb4b 0609 	adc.w	r6, fp, r9
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4619      	mov	r1, r3
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	f04f 0400 	mov.w	r4, #0
 8003ba0:	0094      	lsls	r4, r2, #2
 8003ba2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ba6:	008b      	lsls	r3, r1, #2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4623      	mov	r3, r4
 8003bac:	4628      	mov	r0, r5
 8003bae:	4631      	mov	r1, r6
 8003bb0:	f7fc fb12 	bl	80001d8 <__aeabi_uldivmod>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b50      	ldr	r3, [pc, #320]	; (8003cfc <UART_SetConfig+0x6f4>)
 8003bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	469b      	mov	fp, r3
 8003bca:	f04f 0c00 	mov.w	ip, #0
 8003bce:	46d9      	mov	r9, fp
 8003bd0:	46e2      	mov	sl, ip
 8003bd2:	eb19 0309 	adds.w	r3, r9, r9
 8003bd6:	eb4a 040a 	adc.w	r4, sl, sl
 8003bda:	4699      	mov	r9, r3
 8003bdc:	46a2      	mov	sl, r4
 8003bde:	eb19 090b 	adds.w	r9, r9, fp
 8003be2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bfa:	4689      	mov	r9, r1
 8003bfc:	4692      	mov	sl, r2
 8003bfe:	eb1b 0509 	adds.w	r5, fp, r9
 8003c02:	eb4c 060a 	adc.w	r6, ip, sl
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	f04f 0400 	mov.w	r4, #0
 8003c18:	0094      	lsls	r4, r2, #2
 8003c1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c1e:	008b      	lsls	r3, r1, #2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4623      	mov	r3, r4
 8003c24:	4628      	mov	r0, r5
 8003c26:	4631      	mov	r1, r6
 8003c28:	f7fc fad6 	bl	80001d8 <__aeabi_uldivmod>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b32      	ldr	r3, [pc, #200]	; (8003cfc <UART_SetConfig+0x6f4>)
 8003c34:	fba3 1302 	umull	r1, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	2164      	movs	r1, #100	; 0x64
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	3332      	adds	r3, #50	; 0x32
 8003c46:	4a2d      	ldr	r2, [pc, #180]	; (8003cfc <UART_SetConfig+0x6f4>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c52:	4498      	add	r8, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	469b      	mov	fp, r3
 8003c58:	f04f 0c00 	mov.w	ip, #0
 8003c5c:	46d9      	mov	r9, fp
 8003c5e:	46e2      	mov	sl, ip
 8003c60:	eb19 0309 	adds.w	r3, r9, r9
 8003c64:	eb4a 040a 	adc.w	r4, sl, sl
 8003c68:	4699      	mov	r9, r3
 8003c6a:	46a2      	mov	sl, r4
 8003c6c:	eb19 090b 	adds.w	r9, r9, fp
 8003c70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c88:	4689      	mov	r9, r1
 8003c8a:	4692      	mov	sl, r2
 8003c8c:	eb1b 0509 	adds.w	r5, fp, r9
 8003c90:	eb4c 060a 	adc.w	r6, ip, sl
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	f04f 0400 	mov.w	r4, #0
 8003ca6:	0094      	lsls	r4, r2, #2
 8003ca8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cac:	008b      	lsls	r3, r1, #2
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	4631      	mov	r1, r6
 8003cb6:	f7fc fa8f 	bl	80001d8 <__aeabi_uldivmod>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <UART_SetConfig+0x6f4>)
 8003cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2164      	movs	r1, #100	; 0x64
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	3332      	adds	r3, #50	; 0x32
 8003cd4:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <UART_SetConfig+0x6f4>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4442      	add	r2, r8
 8003ce6:	609a      	str	r2, [r3, #8]
}
 8003ce8:	e7ff      	b.n	8003cea <UART_SetConfig+0x6e2>
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf4:	40011000 	.word	0x40011000
 8003cf8:	40011400 	.word	0x40011400
 8003cfc:	51eb851f 	.word	0x51eb851f

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	4e0d      	ldr	r6, [pc, #52]	; (8003d38 <__libc_init_array+0x38>)
 8003d04:	4c0d      	ldr	r4, [pc, #52]	; (8003d3c <__libc_init_array+0x3c>)
 8003d06:	1ba4      	subs	r4, r4, r6
 8003d08:	10a4      	asrs	r4, r4, #2
 8003d0a:	2500      	movs	r5, #0
 8003d0c:	42a5      	cmp	r5, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	4e0b      	ldr	r6, [pc, #44]	; (8003d40 <__libc_init_array+0x40>)
 8003d12:	4c0c      	ldr	r4, [pc, #48]	; (8003d44 <__libc_init_array+0x44>)
 8003d14:	f000 f820 	bl	8003d58 <_init>
 8003d18:	1ba4      	subs	r4, r4, r6
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	2500      	movs	r5, #0
 8003d1e:	42a5      	cmp	r5, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d28:	4798      	blx	r3
 8003d2a:	3501      	adds	r5, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d32:	4798      	blx	r3
 8003d34:	3501      	adds	r5, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	08004138 	.word	0x08004138
 8003d3c:	08004138 	.word	0x08004138
 8003d40:	08004138 	.word	0x08004138
 8003d44:	0800413c 	.word	0x0800413c

08003d48 <memset>:
 8003d48:	4402      	add	r2, r0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <memset+0xa>
 8003d50:	4770      	bx	lr
 8003d52:	f803 1b01 	strb.w	r1, [r3], #1
 8003d56:	e7f9      	b.n	8003d4c <memset+0x4>

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
